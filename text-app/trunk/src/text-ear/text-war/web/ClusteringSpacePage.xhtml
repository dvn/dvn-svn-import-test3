<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ice="http://www.icesoft.com/icefaces/component">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
      <style type="text/css">
            #layersmap {
                width: 600px;
                height: 300px;
                border: 1px solid black;
                float:left;
            }
            #map2 {
                width: 400px;
                height: 400px;
                border: 1px solid black;
                float:left;
            }
        </style>
</head>
<body >
<ui:composition template="/template.xhtml">
<ui:param name="pageTitle" value="Space of Clusterings"/>
<ui:define name="body">
     <script type="text/javascript">
          // <![CDATA[
           var map;
           var points = new Array();  // List of feature points
           var currentIndex = -1;  // which point in the list we are currently viewing
           var vectorLayer;  // layer where we display the polygon and the points
           var solutionCount = 0;  // number of clustering solutions we have saved on the server side with labels

           function init(){
               OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
                defaultHandlerOptions: {
                    'single': true,
                    'double': false,
                    'pixelTolerance': 0,
                    'stopSingle': false,
                    'stopDouble': false
                },

                initialize: function(options) {
                    this.handlerOptions = OpenLayers.Util.extend(
                        {}, this.defaultHandlerOptions
                    );
                    OpenLayers.Control.prototype.initialize.apply(
                        this, arguments
                    );
                    this.handler = new OpenLayers.Handler.Click(
                        this, {
                            'click': this.trigger
                        }, this.handlerOptions
                    );
                },

                // The trigger is executed when you click on the map
                trigger: function(e) {
                    var clusterNumVal = document.getElementById('ClusterForm:clusterNum').value


                    // add new point
                    var lonlat = map.getLonLatFromViewPortPx(e.xy);
                    addPointToList( lonlat.lon, lonlat.lat,clusterNumVal,-1);

                    // calculate cluster solution for new point
                    document.getElementById('ClusterForm:userYCoord').value= lonlat.lat;
                    document.getElementById('ClusterForm:userXCoord').value= lonlat.lon;
                    document.getElementById('ClusterForm:solutionId').value= -1;// This is a new point clicked on by the user, so
                                                                                // it doesn't have a solution id.
                    document.getElementById('ClusterForm:calcButton').click();

                    // now repaint all points in the list
                    updatePointsDisplay(clusterNumVal);
                }

            });

            // just a basic grey background to display our polygon in
            var graphic = new OpenLayers.Layer.Image(
                'background',
                '/text/resources/images/gray.gif',
                new OpenLayers.Bounds(-180, -88.759, 180, 88.759),
                new OpenLayers.Size(580, 288)
            );

            // this add custom stlyes to polygon
            var styles = new OpenLayers.StyleMap({
                "default": new OpenLayers.Style(null, {
                    rules: [
                        new OpenLayers.Rule({
                            symbolizer: {
                                "Polygon": {
                                    fillColor: "#CBD8C3",
                                    strokeColor: "#B5D29C"
                                }
                            }
                        })
                    ]
                })
            });


            // this is the layer that contains the polygon and all the points
            var setId = document.getElementById("ClusterForm:setId").value;
            vectorLayer = new OpenLayers.Layer.Vector("GML", {
                   strategies: [new OpenLayers.Strategy.Fixed({preload: true})],
                   protocol: new OpenLayers.Protocol.HTTP({
                       url: "/text/ConvexHull?setId="+setId,
                       format: new OpenLayers.Format.GML()
                   }),
                   styleMap: styles
            });



            // register a function to run after the polygon is loaded, which
            // will add the initial point to the layer.
            // we need to do this because it takes a little time to get the data
            // from the servlet, and if we draw the first point on the map before
            // we draw the polygon, then the point is covered up by the polygon.
            vectorLayer.events.register("loadend", vectorLayer, loadEnd);

            // create our map and add the layers to it.
            map = new OpenLayers.Map('map');
            map.addLayers([graphic, vectorLayer]);
            var click = new OpenLayers.Control.Click();
            map.addControl(click);
            click.activate();
            map.addControl(new OpenLayers.Control.MousePosition());


            var bounds = new OpenLayers.Bounds(-2.0, -2.0, 2.0, 2.0);

            map.zoomToExtent(bounds);

           //
           // Code for overview control
           //
           /*
            var overviewGraphic = new OpenLayers.Layer.Image(
                'background',
                '/text/resources/images/gray.gif',
                new OpenLayers.Bounds(-180, -88.759, 180, 88.759),
                new OpenLayers.Size(580, 288)
            );
            var overviewLayer =  new OpenLayers.Layer.Vector("GML", {
                   strategies: [new OpenLayers.Strategy.Fixed()],
                   protocol: new OpenLayers.Protocol.HTTP({
                       url: "/text/ConvexHull?setId="+setId,
                       format: new OpenLayers.Format.GML()
                   })
            });
            var overviewBounds = new OpenLayers.Bounds(
                   -2.0, -2.0, 2.0, 2.0
            )
            // create an overview map control with the default options
            var controlOptions = {
                    maximized:true,
                    layers: [overviewLayer, overviewGraphic]

            }
            var overview = new OpenLayers.Control.OverviewMap(controlOptions);
              //  var overview = new OpenLayers.Control.OverviewMap();
            //    map.addControl(overview);
            */

           }

           function changeClusterRadio(clusterNumVal) {
                document.getElementById('ClusterForm:discoverableCheckbox').checked = false;
                document.getElementById('ClusterForm:clusterNum').value = clusterNumVal;
        
           }

           function calculateButtonAction() {
               document.getElementById('clusterRadio1').checked = false;
               document.getElementById('clusterRadio2').checked = false;
               document.getElementById('clusterRadio3').checked = false;
               document.getElementById('ClusterForm:discoverableCheckbox').checked = false;
               addPointForClusterNum(document.getElementById('ClusterForm:clusterNum').value);
               
           }

           function addPointForClusterNum(clusterNumVal) {             
               // Add the current point to the list, with the new clusterNum
               var current = points[currentIndex];
               addPointToList( current.geometry.x, current.geometry.y, clusterNumVal, -1 );

               // Now update the colors of all the points, given the new clusterNum
               updatePointsDisplay(clusterNumVal);
           }


           function addPointToList(x,y,clusterNumVal,solutionIdVal) {
               // if we have stepped back into the point history,
               // remove the points in the forward direction

               if (currentIndex<points.length-1) {
                   for(var i= currentIndex+1; i<points.length; i++) {
                       vectorLayer.removeFeatures(points[i]);
                   }
                   var elementsToRemove = points.length-currentIndex;
                   points.splice(currentIndex+1,elementsToRemove  );
               }

               var origin = new OpenLayers.Geometry.Point(x,y);
                    var style = {
                        strokeColor: "#7995F9",
                        fillColor: "#7995F9",
                        strokeOpacity: 1,
                        strokeWidth: 1,
                        pointRadius: 4,  // this point is bigger because its the latest
                        pointerEvents: "visiblePainted"
                    };
                    var attribs = {
                        clusterNum: clusterNumVal,
                        solutionId: solutionIdVal
                    }
                    var userPoint = new OpenLayers.Feature.Vector(origin, attribs, style);
                    vectorLayer.addFeatures([userPoint]);

                    points.push(userPoint);
                    currentIndex++;
           }

           //
           // This method is called whenever label info is saved by the user
           // We mark the current point as saved, so we can associate it with the
           // solution saved on the server side
           function saveSolution() {
               if (points[currentIndex].attributes.solutionId<0) {
                   points[currentIndex].attributes.solutionId = solutionCount;
                   solutionCount++;
               }
           }
           function addSavedPoint(x,y,clusterNum,solutionId) {

               addPointToList(x,y,clusterNum,solutionId);
               updateDisplay(currentIndex);
           }
           function updatePointsDisplay(clusterNumVal ) {
                document.getElementById('ClusterForm:clusterNum').value = clusterNumVal;
                var pointsLength = points.length;
                var displayHistory = document.getElementById('ClusterForm:history').checked;

                // update colors of the point features on the vector layer
                for (var i=0; i<currentIndex; i++) {
                    if (displayHistory) {
                        points[i].style.pointRadius=2;
                        if (points[i].attributes.clusterNum == clusterNumVal) {
                            // older points in the current cluster level - small red
                            points[i].style.strokeColor="#7995F9";
                            points[i].style.fillColor="#7995F9";
                        } else {
                            // older points in different cluster levels - grayed out
                            points[i].style.strokeColor="#A9A9A9";
                            points[i].style.fillColor="#A9A9A9";
                        }
                    } else {
                        // if displayHistory is false, make older points invisible
                        points[i].style.pointRadius=0;
                    }
                }
                // current point is always bold (which for now is a bigger dot)
                points[currentIndex].style.pointRadius=4;
                points[currentIndex].style.strokeColor="#7995F9";
                points[currentIndex].style.fillColor="#7995F9";

                // the points beyond the currentIndex need to be invisible - so setting radius to 0
                for(var i=currentIndex+1; i<pointsLength; i++) {
                    points[i].style.pointRadius=0;
                }
                vectorLayer.redraw();
            }
            function loadEnd (evt) {
               // alert("received evt: "+ evt);

                addPointToList(0,0,5,-1);
               // var hoverCtrl = new OpenLayers.Control.SelectFeature(vectorLayer, {
               //     hover: true,
               //     geometryTypes: ["OpenLayers.Geometry.Point"],
               //     onSelect: openPopup
               //     })

              //  map.addControl(hoverCtrl);
              //  hoverCtrl.activate();

            }
            function openPopup() {

                popup = new OpenLayers.Popup("chicken",
                   new OpenLayers.LonLat(0,0),
                   new OpenLayers.Size(5,5),
                   "example popup",
                   true);

                map.addPopup(popup);

            }
            function goBack() {
                if (currentIndex>0) {
                    currentIndex--;
                    updateDisplay(currentIndex);
                }

            }
            function goForward() {
                if (currentIndex<points.length-1) {
                    currentIndex++;
                    updateDisplay(currentIndex);
                }
            }
            function updateDisplay(index) {
                // do a submit to get the clusterSolution for this point in the index
                document.getElementById('ClusterForm:clusterNum').value = points[index].attributes.clusterNum;
                document.getElementById('ClusterForm:userYCoord').value= points[index].geometry.y;
                document.getElementById('ClusterForm:userXCoord').value= points[index].geometry.x;
                document.getElementById('ClusterForm:solutionId').value= points[index].attributes.solutionId;
                document.getElementById('ClusterForm:calcButton').click();

                // update the map to show the cluster layer for this point
                updatePointsDisplay(points[index].attributes.clusterNum);

            }
            function clearHistory() {
                var lastPoint = points[currentIndex];
                currentIndex = -1;  // where we are in the history
                vectorLayer.removeFeatures(points);
                vectorLayer.redraw();
                points = new Array();  // clear list of feature points
                addPointToList(lastPoint.geometry.x, lastPoint.geometry.y, lastPoint.attributes.clusterNum, lastPoint.attributes.solutionId); // initialize with starting point
            }

            function popupDocument(mylink) {
                if (! window.focus)return true;
                var href;
                if (typeof(mylink) == 'string')
                    href=mylink;
                else
                    href=mylink.href;
                window.open(href, 'Cluster Document', 'width=400,height=200,scrollbars=yes');
                return false;
            }


      // ]]>
      </script>
<ice:form id="ClusterForm">
    <ice:inputHidden id="setId" value="#{ClusteringSpacePage.setId}"/>
    <ice:commandButton visible="false" id="calcButton" value="calculate" actionListener="#{ClusteringSpacePage.updateClusterSolutionListener}"/>
    <ice:inputText visible="false" id="userXCoord" value="#{ClusteringSpacePage.xCoord}" valueChangeListener="#{ClusteringSpacePage.testValueChange}"/>
    <ice:inputText visible="false" id="userYCoord" value="#{ClusteringSpacePage.yCoord}"/>
    <ice:inputHidden id="solutionId" value="#{ClusteringSpacePage.solutionIndex}"/>


<style type="text/css">
    .fileInfo {margin-bottom:1em;}
    .navSettingsBar {overflow:hidden; margin-bottom:1.5em;}
    .clusteringNavHistory {float:left; overflow:hidden; border:1px solid grey; margin-right: 1em;}
    .clusteringNavHistory div {float:left; padding:2px;}
    .clusteringNavHistory a {cursor:pointer; padding:.75em 1em; display:block;}
    .clusteringNavHistory a:hover {background:#EEEEEE;}
    .settingsBar {border:1px solid grey;}
    .settingsBar td {padding: .55em 1em;}
    .settingsBar label {padding-right:6px;}
    .settingsBar input.iceCmdBtn {margin-left:1em;}
    .clusterExplorer {overflow:hidden;}
    .clusterExplorer .map {width:540px; margin-right:20px; float:left;}
    .clusterExplorer #map {height:380px;}
    .clusterExplorer .table {width:360px; float:left;}
    .mapDisplayActions {overflow:hidden; margin-top:1em;}
    .mapDisplayActions div {float:left; margin-right:1em;}
    div.clusterNumberBlock {float:none; margin-bottom:1em;}
    .clusterLabelHeader {padding: .5em; background:#bfdcf1;}
</style>

    <div class="fileInfo">
        <div><ice:outputText value="Document Set Id: #{ClusteringSpacePage.setId}" /></div>
      <!--  <div>uploaded by bstewart, Mon Jan 11, 2010, 10:22:19 EDT</div>
        <div>Format: UTF-8.txt, Converted from PDF, English</div>  -->
        <div><ice:outputText value="Size: #{ClusteringSpacePage.documentCount} Files"/></div>
        <div>Description: Sample documents used for testing purposes.</div>
    </div>
    <div class="navSettingsBar">
        <div class="clusteringNavHistory">
            <div><a onclick="goBack();" title="Previous Coordinate Point">&#60;</a></div>
            <div><a onclick="goForward();" title="Next Coordinate Point">&#62;</a></div>
        </div>
        <table cellspacing="0" cellpadding="0" border="0" class="settingsBar">
            <tr>
                <td>
                    <label for="numberclusters">Number of Clusters</label>
                    <ice:inputText id="clusterNum" size="5" value="#{ClusteringSpacePage.clusterNum}"></ice:inputText>
                    <ice:commandButton id="changeCluster" value="calculate" onclick="calculateButtonAction();" actionListener="#{ClusteringSpacePage.changeClusterNumberListener}"/>
                    <ice:commandButton visible ="false" id="discoverableButton" value="getDiscoverable"  actionListener="#{ClusteringSpacePage.getDiscoverableListener}"/>
                </td>
                <td>
                    <input type="radio" name="clusterRadio" id="clusterRadio1" onclick="changeClusterRadio(10);"/> <label for="clusterRadio1">10 Clusters (Low)</label>
                </td>
                <td>
                    <input type="radio" name="clusterRadio" id="clusterRadio2" onclick="changeClusterRadio(15);"/> <label for="clusterRadio2">15 Clusters (Medium)</label>
                </td>
                <td>
                    <input type="radio" name="clusterRadio" id="clusterRadio3" onclick="changeClusterRadio(30);"/> <label for="clusterRadio3">30 Clusters (High)</label>
                </td>
                <td>
                    <ice:selectBooleanCheckbox onclick="if (this.checked) document.getElementById('ClusterForm:discoverableButton').click();" id="discoverableCheckbox"  value="#{ClusteringSpacePage.discoverable}"  /> <label for="clusterDiscoverable">Discoverable</label>
                </td>
            </tr>
        </table>
    </div>
    <div class="clusterExplorer">
        <div class="map">
            <div id="map"/>
            <div class="mapDisplayActions">
                <div class="clusterNumberBlock">
                   <ice:outputText value="Current Cluster Number:"/> <ice:outputText id="currentClusterNumber" value="#{ClusteringSpacePage.clusterNum}"></ice:outputText>
                </div>
                <!-- <div>
                    <ice:selectBooleanCheckbox id="algorithm" value=""/><label for="algorithm">Display Clustering Algorithm</label>
                </div> -->
                <div>
                    <ice:selectBooleanCheckbox onclick="updatePointsDisplay(document.getElementById('ClusterForm:clusterNum').value);" id="history" value="true" /><label for="history">Display History</label>
                </div>
                <div>
                    <ice:commandButton type="submit" value="Clear History" onclick="clearHistory();"/>
                </div>
            </div>
            <div>
                <ice:dataTable id="savedList" cellpadding="0" cellspacing="0" value="#{ClusteringSpacePage.savedSolutions}" var="saved" width="100%">
                    <ice:column>
                      <f:facet name="header">
                        <ice:outputText  value="Label"/>
                      </f:facet>
                        <ice:commandLink value="#{saved.infoLabel}" onclick="addSavedPoint(#{saved.x},#{saved.y},#{saved.numClusters},#{saved.id});" actionListener="#{ClusteringSpacePage.updateClusterSolutionListener}"></ice:commandLink>
                    </ice:column>
                    <ice:column>
                        <f:facet name="header">
                            <ice:outputText  value="Number of Clusters"/>
                        </f:facet>
                        <ice:outputText value="#{saved.numClusters}"/>
                    </ice:column>
                </ice:dataTable>
            </div>
        </div>
        <div class="table">
            <div class="clusterLabelHeader">
<style type="text/css">
.clusterLabelInputBlock {display:none;}
.clusterLabelBlock.edit a.clusterLabelValueEdit {display:none;}
.clusterLabelBlock.edit a.clusterInfoValueLabel {display:inline;}
.clusterLabelBlock.edit div.clusterLabelInputBlock {display:block;}
</style>

<script type="text/javascript">
    jQuery(document).ready(function(){

          var columnHeight = jQuery("div.map").height();
          jQuery("div.table").css({
              "height" : columnHeight,
              "overflow-y" : "auto"
          });

          jQuery("a.clusterLabelValueEdit").click(function() {
            var a = jQuery(this);
            a.parent().addClass("edit");
            return false;
          });
          jQuery(".clusterLabelInputBlock input:submit").click(function() {
            var txt = jQuery(this);
            txt.parent().parent().removeClass("edit");
            return false;
          });
          jQuery(".clusterLabelInputBlock label a.clusterInfoValueLabel").click(function() {
            var txt = jQuery(this);
            txt.parent().parent().parent().removeClass("edit");
            return false;
          });
    });
</script>
                <div>
                    <div class="clusterLabelBlock">
                        <a href="#" class="clusterLabelValueEdit"><ice:outputText value="Label [+] #{ClusteringSpacePage.solutionLabel}"/></a>
                        <div class="clusterLabelInputBlock">
                            <label for="clusteringlabel"><a href="#" class="clusterInfoValueLabel">Label [-]</a></label> <ice:inputText id="clusteringlabel" value="#{ClusteringSpacePage.solutionLabel}"></ice:inputText>
                            <ice:commandButton value="Save" onclick="saveSolution();" actionListener="#{ClusteringSpacePage.saveSolutionLabel}"/>
                        </div>
                    </div>
                </div>
            </div>

            <div class="clusterTable">
<style type="text/css">
.clusterInfoValueBlock {display:none;}
.clusterInfoLabelBlock.edit a.clusterInfoValueEdit {display:none;}
.clusterInfoLabelBlock.edit a.clusterInfoValueLabel {display:inline;}
.clusterInfoLabelBlock.edit div.clusterInfoValueBlock {display:block;}
.clusterTable .iceDatTbl {margin:0;}
td.clusterCountCol {width:14%;}
.clusterTable .iceDatTbl tfoot {display:none;}

.clusterDetailLink {float:right;}
.clusterDetailBlock .dvnTabs {margin-top:.5em;}
.clusterDetailBlock .dvnTabs .icePnlTbOn .MidMid a {padding-left:4px; margin:0; text-transform:none;}
.clusterDetailBlock .dvnTabs .icePnlTbOff .MidMid a {padding-left:4px;}
.clusterDetailBlock .dvnTabs .icePnlTbOver .MidMid a {padding-left:4px;}
.clusterDetailBlock .dvnTabs .icePnlTbOn .MidMid a td {font-size:1em !important;}
</style>
                <ice:dataTable id="clusterInfo" binding="#{ClusteringSpacePage.clusterTable}" cellpadding="0" cellspacing="0" value="#{ClusteringSpacePage.clusterTableModel}" var="row" width="100%">
                    <ice:column>
                        <ice:panelGrid columns="2" cellpadding="0" cellspacing="0" border="0" width="100%"
                                        columnClasses="clusterCountCol,clusterInfoCol">
                            <ice:column>
                                    <ice:outputText value="#{row.clusterInfo.clusterPercentStr}"/>
                                    <ice:outputText value="#{row.clusterInfo.clusterCount}"/>
                            </ice:column>
                            <ice:column>
                                <div>
                                    <ice:outputText value="#{row.clusterInfo.topWords}"/>
                                </div>
                                <div class="clusterInfoLabelBlock">
                                    <a href="#" class="clusterInfoValueEdit"><ice:outputText value="Label [+] #{row.clusterInfo.label}"/></a>
                                    <div class="clusterInfoValueBlock">
                                        <label for="clusterlabel"><a href="#" class="clusterInfoValueLabel">Label [-]</a></label> <ice:inputText id="clusterlabel" value="#{row.newValue}"></ice:inputText>
                                        <ice:commandButton value="Save" onclick="saveSolution();" actionListener="#{ClusteringSpacePage.saveClusterLabel}"/>
                                    </div>
                                </div>
                            </ice:column>
                        </ice:panelGrid>
                                    
                                    <a href="#" class="clusterDetailLink">View Detail</a>

                                    <div class="clusterDetailBlock">
                                        <ice:panelTabSet id="tabSet1" styleClass="dvnTabs" selectedIndex="0">
                                            <ice:panelTab id="doc" label="Documents">
                                               

                                                <p><ice:outputText value="Examplar Document: " rendered="#{row.viewDocumentIndex==0}"/>
                                                <ice:outputText value="#{row.viewDocumentName}"/>
                                                </p>
                                               
                                                
                                                <p><ice:outputText value="#{row.viewDocumentPreview}"/></p>
                                                <ice:commandLink actionListener="#{row.openPopup}">Full Document</ice:commandLink>
                                            </ice:panelTab>

                                            <ice:panelTab id="list" label="List View">
                                                 <ice:outputText value="#{row.clusterInfo.clusterCount} Documents in Cluster"/>
                                                 <ice:dataPaginator for="clusterDocs"
                                                                   
                                                                   id="dataScroll_3"
                                                                   paginator="true" fastStep="3"
                                                                   paginatorMaxPages="4"
                                                                   renderFacetsIfSinglePage="true"
                                                                   styleClass="dvnPaginatorRight">
                                                  <f:facet name="first">
                                                    <ice:graphicImage url="/resources/icefaces/dvn_rime/css-images/arrow-first.gif" title="First Page"/>
                                                  </f:facet>
                                                  
                                                  <f:facet name="previous">
                                                    <ice:graphicImage url="/resources/icefaces/dvn_rime/css-images/arrow-previous.gif" title="Previous"/>
                                                  </f:facet>
                                                  <f:facet name="next">
                                                    <ice:graphicImage url="/resources/icefaces/dvn_rime/css-images/arrow-next.gif" title="Next"/>
                                                  </f:facet>
                                                 
                                                  <f:facet name="last">
                                                    <ice:graphicImage url="/resources/icefaces/dvn_rime/css-images/arrow-last.gif" title="Last Page"/>
                                                  </f:facet>
                                                </ice:dataPaginator>
                                                <ice:dataTable  rows="5" id="clusterDocs"  cellpadding="0" cellspacing="0" value="#{row.clusterInfo.fileIndices}" var="fileId" width="100%">
                                                     <ice:column>
                                                         <ice:commandLink value="#{fileId}" actionListener="#{row.viewDocument}"/>                    
                                                    </ice:column>
                                                </ice:dataTable>
                                            </ice:panelTab>
                                        </ice:panelTabSet>
                                    </div>

                                    <ice:panelPopup id="modalPnlPop"
                                                    draggable="true" modal="false"
                                                    visible="#{row.showPopup}"
                                                    autoCentre="true"
                                                    styleClass="corePopup">
                                        <f:facet name="header">
                                            <ice:panelGroup styleClass="popupHeaderWrapper">
                                                <ice:outputText
                                                    value="Viewing Document: #{row.viewDocumentName}"
                                                        styleClass="popupHeaderText"/>

                                            </ice:panelGroup>
                                        </f:facet>
                                        <f:facet name="body">
                                            <ice:panelGroup styleClass="popupBody">
                                                <ice:outputText value="#{row.viewDocumentText}"/><br/>
                                                <ice:commandButton id="modalPnlCloseButton" type="submit"
                                                                   value="Close Popup"
                                                                   actionListener="#{row.closePopup}"/>
                                            </ice:panelGroup>
                                        </f:facet>
                                    </ice:panelPopup>
                    </ice:column>
                    <f:facet name="footer">
                        <script type="text/javascript">
                            jQuery(document).ready(function(){
                                  jQuery("a.clusterInfoValueEdit").click(function() {
                                    var a = jQuery(this);
                                    a.parent().addClass("edit");
                                    return false;
                                  });
                                  jQuery(".clusterInfoLabelBlock input:submit").click(function() {
                                    var txt = jQuery(this);
                                    txt.parent().parent().removeClass("edit");
                                    return false;
                                  });
                                  jQuery(".clusterInfoLabelBlock label a.clusterInfoValueLabel").click(function() {
                                    var txt = jQuery(this);
                                    txt.parent().parent().parent().removeClass("edit");
                                    return false;
                                  });
                            });

                            jQuery(document).ready(initClusterTabs);
                            function initClusterTabs(){
                                // choose text for the show/hide link - can contain HTML (e.g. an image)
                                var showText='View Detail';
                                var hideText='Close Detail';

                                // initialise the visibility check
                                var is_visible = false;

                                // append show/hide links to the element directly preceding the element with a class of "toggle"
                                jQuery(this).prev('a.clusterDetailLink').text(showText);

                                // hide all of the elements with a class of 'toggle'
                                jQuery('.clusterDetailBlock').hide();

                                // capture clicks on the toggle links
                                jQuery('a.clusterDetailLink').click(function() {

                                    // change the link depending on whether the element is shown or hidden
                                    if (jQuery(this).text()==showText) {
                                        jQuery(this).text(hideText);
                                    }
                                    else {
                                        jQuery(this).text(showText);
                                    }

                                    // toggle the display
                                    jQuery(this).next('.clusterDetailBlock').toggle();

                                    // return false so any link destination is not followed
                                    return false;

                                });
                            }
                        </script>
                    </f:facet>
                </ice:dataTable>

            </div>

        </div>
    </div>
</ice:form>

</ui:define>
</ui:composition>
</body>
</html>
