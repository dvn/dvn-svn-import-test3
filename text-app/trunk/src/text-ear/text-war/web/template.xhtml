<?xml version="1.0" encoding="UTF-8"?>
<f:view
      xmlns:gui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:jsp="http://java.sun.com/JSP/Page"
      xmlns:ice="http://www.icesoft.com/icefaces/component"
      xmlns:dvn="/WEB-INF/tlds/dvn-components">
<ice:outputDeclaration
      doctypeRoot="HTML"
      doctypePublic="-//W3C//DTD XHTML 1.0 Transitional//EN"
      doctypeSystem="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  
  
  <!-- page title param passed in by param -->
  <title><h:outputText value="#{pageTitle}"/></title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Language" content="en"/>
  <meta http-equiv="imagetoolbar" content="no"/>
  <link rel="stylesheet" type="text/css" href="/dvn/resources/icefaces/dvn_rime/dvn_rime.css"/>
  <link rel="stylesheet" type="text/css" href="/dvn/resources/css/dvngeneral.css"/>
  <link rel="stylesheet" type="text/css" href="/dvn/resources/css/dvnspecific.css"/>
  <link rel="stylesheet" type="text/css" href="/dvn/resources/css/dvnhome.css"/>
  <link rel="stylesheet" type="text/css" href="/dvn/resources/css/dvnstudy.css"/>
  <!-- IE SPECIFIC STYLESHEET -->
  <ice:outputText escape="false" nospan="true"
    value="&#60;!--[if lte IE 8]&#62;
	&#60;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;/dvn/resources/css/iefix.css&#34;/&#62;
    &#60;![endif]--&#62;"/>
  <script type="text/javascript" src="/dvn/resources/javascript/EventCapture.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/jquery.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/jquery.corner.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/excanvas.pack.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/jquery.ifixpng.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/jquery.truncator.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/sgbeal-togglepane.jquery.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/jquery.accordion.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/jquery.cookie.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/jcap.js"/>
  <script type="text/javascript" src="/dvn/resources/javascript/md5.js"/>
  <!-- The following script is in place to make sure that the template code is reloaded when a forward happens
    or when a page goes back to itself but with a different "view" (as with tabs); each page should, if need be,
    define a uniquifier for each "view" (for example, a tabbed page would just use the selectedIndex of the tabSet) -->
  <script src="http://openlayers.org/api/OpenLayers.js"></script>
  <script src="http://proj4js.org/lib/proj4js-compressed.js"></script>
  <script type="text/javascript">
      // <![CDATA[   
           var map;
           var points = new Array();  // List of feature points
           var currentIndex = -1;  // which point in the list we are currently viewing
           var vectorLayer;  // layer where we display the polygon and the points
           var solutionCount = 0;  // number of clustering solutions we have saved on the server side with labels
           
           function init(){
               OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
                defaultHandlerOptions: {
                    'single': true,
                    'double': false,
                    'pixelTolerance': 0,
                    'stopSingle': false,
                    'stopDouble': false
                },

                initialize: function(options) {
                    this.handlerOptions = OpenLayers.Util.extend(
                        {}, this.defaultHandlerOptions
                    );
                    OpenLayers.Control.prototype.initialize.apply(
                        this, arguments
                    );
                    this.handler = new OpenLayers.Handler.Click(
                        this, {
                            'click': this.trigger
                        }, this.handlerOptions
                    );
                },

                // The trigger is executed when you click on the map
                trigger: function(e) {
                    var clusterNumVal = document.getElementById('ClusterForm:clusterNum').value


                    // add new point
                    var lonlat = map.getLonLatFromViewPortPx(e.xy);  
                    addPointToList( lonlat.lon, lonlat.lat,clusterNumVal,-1);

                    // calculate cluster solution for new point
                    document.getElementById('ClusterForm:userYCoord').value= lonlat.lat;
                    document.getElementById('ClusterForm:userXCoord').value= lonlat.lon;
                    document.getElementById('ClusterForm:solutionId').value= -1;// This is a new point clicked on by the user, so
                                                                                // it doesn't have a solution id.
                    document.getElementById('ClusterForm:calcButton').click();

                    // now repaint all points in the list
                    updatePointsDisplay(clusterNumVal);                                       
                }

            });

            // just a basic grey background to display our polygon in
            var graphic = new OpenLayers.Layer.Image(
                'background',
                '/text/resources/images/gray.gif',
                new OpenLayers.Bounds(-180, -88.759, 180, 88.759),
                new OpenLayers.Size(580, 288)
            );


            // this is the layer that contains the polygon and all the points
            var setId = document.getElementById("ClusterForm:setId").value;
            vectorLayer = new OpenLayers.Layer.Vector("GML", {
                   strategies: [new OpenLayers.Strategy.Fixed({preload: true})],
                   protocol: new OpenLayers.Protocol.HTTP({
                       url: "/text/ConvexHull?setId="+setId,
                       format: new OpenLayers.Format.GML()
                   })
            });

            // register a function to run after the polygon is loaded, which
            // will add the initial point to the layer.
            // we need to do this because it takes a little time to get the data
            // from the servlet, and if we draw the first point on the map before
            // we draw the polygon, then the point is covered up by the polygon.
            vectorLayer.events.register("loadend", vectorLayer, selected);
    
            // create our map and add the layers to it.
            map = new OpenLayers.Map('map');
            map.addLayers([graphic, vectorLayer]);
            var click = new OpenLayers.Control.Click();
            map.addControl(click);
            click.activate();
            map.addControl(new OpenLayers.Control.MousePosition());
                
              
            var bounds = new OpenLayers.Bounds(-2.0, -2.0, 2.0, 2.0);
            
            map.zoomToExtent(bounds);
            
           //
           // Code for overview control
           //
           /*
            var overviewGraphic = new OpenLayers.Layer.Image(
                'background',
                '/text/resources/images/gray.gif',
                new OpenLayers.Bounds(-180, -88.759, 180, 88.759),
                new OpenLayers.Size(580, 288)
            );
            var overviewLayer =  new OpenLayers.Layer.Vector("GML", {
                   strategies: [new OpenLayers.Strategy.Fixed()],
                   protocol: new OpenLayers.Protocol.HTTP({
                       url: "/text/ConvexHull?setId="+setId,
                       format: new OpenLayers.Format.GML()
                   })
            });
            var overviewBounds = new OpenLayers.Bounds(
                   -2.0, -2.0, 2.0, 2.0
            )
            // create an overview map control with the default options
            var controlOptions = {
                    maximized:true,
                    layers: [overviewLayer, overviewGraphic]
                   
            }
            var overview = new OpenLayers.Control.OverviewMap(controlOptions);
              //  var overview = new OpenLayers.Control.OverviewMap();
            //    map.addControl(overview);
            */

      }

      

      function changeClusterNum() {
               // get the new number of clusters
               var clusterNumVal = document.getElementById('ClusterForm:clusterNum').value

               // Add the most recent point to the list, with the new clusterNum
               var mostRecent = points[points.length-1];
               addPointToList( mostRecent.geometry.x, mostRecent.geometry.y, clusterNumVal, -1 );

               // Now update the colors of all the points, given the new clusterNum
               updatePointsDisplay(clusterNumVal);
           }

           function addPointToList(x,y,clusterNumVal,solutionIdVal) {
               // if we have stepped back into the point history,
               // remove the points in the forward direction

               if (currentIndex<points.length-1) {
                   for(var i= currentIndex+1; i<points.length; i++) {
                       vectorLayer.removeFeatures(points[i]);
                   }
                   var elementsToRemove = points.length-currentIndex;
                   points.splice(currentIndex+1,elementsToRemove  );
               }

               var origin = new OpenLayers.Geometry.Point(x,y);
                    var style = {
                        strokeColor: "#FF0000",
                        fillColor: "#FF0000",
                        strokeOpacity: 1,
                        strokeWidth: 1,
                        pointRadius: 4,  // this point is bigger because its the latest
                        pointerEvents: "visiblePainted"
                    };
                    var attribs = {
                        clusterNum: clusterNumVal,
                        solutionId: solutionIdVal
                    }
                    var userPoint = new OpenLayers.Feature.Vector(origin, attribs, style);
                    vectorLayer.addFeatures([userPoint]);

                    points.push(userPoint);
                    currentIndex++;
           }

           //
           // This method is called whenever label info is saved by the user
           // We mark the current point as saved, so we can associate it with the
           // solution saved on the server side
           function saveSolution() {
               if (points[currentIndex].attributes.solutionId<0) {
                   points[currentIndex].attributes.solutionId = solutionCount;
                   solutionCount++;
               }
           }

           function addSavedPoint(x,y,clusterNum,solutionId) {

               addPointToList(x,y,clusterNum,solutionId);
               updateDisplay(currentIndex);
           }

           function updatePointsDisplay(clusterNumVal ) {
                document.getElementById('ClusterForm:clusterNum').value = clusterNumVal;
                var pointsLength = points.length;

                // update colors of the point features on the vector layer
                for (var i=0; i<currentIndex; i++) {
                    points[i].style.pointRadius=2;
                    if (points[i].attributes.clusterNum == clusterNumVal) {
                        // older points in the current cluster level - small red
                        points[i].style.strokeColor="#FF0000";  
                        points[i].style.fillColor="#FF0000";
                    } else {
                        // older points in different cluster levels - grayed out
                        points[i].style.strokeColor="#A9A9A9";  
                        points[i].style.fillColor="#A9A9A9";
                    }
                }
                // current point is always bold (which for now is a bigger red dot)
                points[currentIndex].style.pointRadius=4;
                points[currentIndex].style.strokeColor="#FF0000";
                points[currentIndex].style.fillColor="#FF0000";
                
                // the points beyond the currentIndex need to be invisible - so setting radius to 0
                for(var i=currentIndex+1; i<pointsLength; i++) {
                    points[i].style.pointRadius=0;
                }
                vectorLayer.redraw();
           }
            function selected (evt) {
               // alert("received evt: "+ evt);
                addPointToList(0,0,5,-1);

            }
            function goBack() {
                if (currentIndex>0) {
                    currentIndex--;
                    updateDisplay(currentIndex);
                }

            }
            function goForward() {
                if (currentIndex<points.length-1) {
                    currentIndex++;
                    updateDisplay(currentIndex);
                }
            }
            function updateDisplay(index) {
                // do a submit to get the clusterSolution for this point in the index
                document.getElementById('ClusterForm:clusterNum').value = points[index].attributes.clusterNum;
                document.getElementById('ClusterForm:userYCoord').value= points[index].geometry.y;
                document.getElementById('ClusterForm:userXCoord').value= points[index].geometry.x;
                document.getElementById('ClusterForm:solutionId').value= points[index].attributes.solutionId;
                document.getElementById('ClusterForm:calcButton').click();

                // update the map to show the cluster layer for this point
                updatePointsDisplay(points[index].attributes.clusterNum);

            }
            function clearHistory() {
               
                currentIndex = -1;  // where we are in the history
                vectorLayer.removeFeatures(points);
                vectorLayer.redraw();
                points = new Array();  // clear list of feature points
                addPointToList(0,0,5,-1); // initialize with starting point
            }
            
      // ]]>
  </script>

 </head>
<!--  this template is example 4.3 in the Facelets Shortcut -->
<body onload="init();" >
   
    
    <div class="dvn_wrapper" id="dvn_wrapper">
        <div class="dvn_content" id="content-frame">
            <!-- required to fix a bug in firefox where the connection status box can be displayed erroneously -->
            <ice:outputConnectionStatus style="position: absolute; left: 610px; top: 80px;" showPopupOnDisconnect="false"/>
            
            <gui:insert name="body">Default Body</gui:insert>
            <div class="dvn_clear"></div>
        </div>
    </div>
   
</body>
</html>
</f:view>
