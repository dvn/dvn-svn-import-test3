<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:jsp="http://java.sun.com/JSP/Page"
      xmlns:dvn="/WEB-INF/tlds/dvn-components"
      xmlns:ice="http://www.icesoft.com/icefaces/component">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
</head>
<body>
<ui:composition template="/template.xhtml">
<ui:param name="pageTitle" value="Explore Data - #{VDCRequest.dataversePageTitle}"/>
<ui:define name="body">
<ice:form id="ExploreDataPage">
    <ice:message for="exploredataform" id="boxErrorMsg" styleClass="errorMessage"/>

<ice:inputHidden id="vdcId" value="#{VDCRequest.currentVDCId}"/>

<ice:outputText visible="false" id="columnString" value="#{ExploreDataPage.columnString}"/>
<ice:outputText visible="false" id="legendInt" value="#{ExploreDataPage.legendInt}"/>
<ice:outputText visible="false" id="heightInt" value="#{ExploreDataPage.heightInt}"/>
<ice:outputText visible="false" id="yAxisLabel" value="#{ExploreDataPage.yAxisLabel}"/>
<ice:outputText visible="false" id="transformedData" value="#{ExploreDataPage.transformedData}"/>
<ice:outputText visible="false" id="transformedDataIndexed" value="#{ExploreDataPage.transformedDataIndexed}"/>
<ice:outputText visible="false" id="highValStandard" value="#{ExploreDataPage.highValStandard}"/>
<ice:outputText visible="false" id="lowValStandard" value="#{ExploreDataPage.lowValStandard}"/>
<ice:outputText visible="false" id="highValIndexed" value="#{ExploreDataPage.highValIndexed}"/>
<ice:outputText visible="false" id="lowValIndexed" value="#{ExploreDataPage.lowValIndexed}"/>
<ice:outputText visible="false" id="dtColumnString" value="#{ExploreDataPage.dtColumnString}"/>
<ice:outputText visible="false" id="imageColumnString" value="#{ExploreDataPage.imageColumnString}"/>
<ice:outputText visible="false" id="dataString" value="#{ExploreDataPage.dataString}"/>
<ice:outputText visible="false" id="indexedDataString" value="#{ExploreDataPage.indexedDataString}"/>
<ice:outputText visible="false" id="dataColumns" value="#{ExploreDataPage.dataColumns}"/>
<ice:outputText visible="false" id="displayType" value="#{ExploreDataPage.displayType}"/>
<ice:outputText visible="false" id="startYear" value="#{ExploreDataPage.startYear}"/>
<ice:outputText visible="false" id="endYear" value="#{ExploreDataPage.endYear}"/>
<ice:outputText visible="false" id="graphTitleHidden" value="#{ExploreDataPage.graphTitle}"/>
<ice:outputText visible="false" id="sourceText" value="#{ExploreDataPage.sources}"/>
<ice:inputText visible="false" id="imageURL" binding="#{ExploreDataPage.inputImageURL}" />
<ice:outputText visible="false" id="imageAxisLabel" value="#{ExploreDataPage.imageAxisLabel}"/>
<ice:outputText visible="false" id="imageSourceFooter" value="#{ExploreDataPage.imageSourceFooter}"/>
<ice:outputText visible="false" id="imageAxisLabelNoYLabel" value="#{ExploreDataPage.imageAxisLabelNoYLabel}"/>
<ice:outputText visible="false" id="imageSourceFooterNoYLabel" value="#{ExploreDataPage.imageSourceFooterNoYLabel}"/>
<ice:outputText visible="false" id="displaySourceFooter" value="#{ExploreDataPage.displaySourceFooter}"/>
<ice:outputText visible="false" id="displaySourceFooterNoYLabel" value="#{ExploreDataPage.displaySourceFooterNoYLabel}"/>
<ice:outputText visible="false" id="defaultView" value="#{ExploreDataPage.defaultView}"/>
<ice:outputText visible="false" id="hasURL"/>
<ice:commandButton visible="false" id="updateGraphTitle" type="submit" value="update" action="#{ExploreDataPage.updateGraphTitle}"/>
<ice:commandButton visible="false" id="deleteLineHidden" value="Delete Line hidden" actionListener="#{ExploreDataPage.deleteLine}"/>
<ice:commandButton visible="false" id="updateImageURL" value="Update URL" action="#{ExploreDataPage.updateImageURL}"/>
<ice:commandButton visible="false" id="updateIncludeFlags" value="Update Include Flags" action="#{ExploreDataPage.updateIncludeFlags}"/>
<ice:commandButton visible="false" id="resetIndexValue" actionListener="#{ExploreDataPage.resetIndexDisplay}"/>
<ice:commandButton visible="false" id="selectDisplayButton" action="#{ExploreDataPage.reset_DisplayType}"/>
<ice:commandButton visible="false" id="updateUseIndex" action="#{ExploreDataPage.updateUseIndex}"/>
<ice:selectBooleanCheckbox visible="false" id="displayIndicesHidden" value="#{ExploreDataPage.displayIndexes}" rendered="true" />                                                               
<ice:commandButton visible="false" id="updateStartYear" action="#{ExploreDataPage.update_StartYear}"/>
<ice:commandButton visible="false" id="updateLegendPosition" action="#{ExploreDataPage.update_LegendPosition}"/>
<ice:commandButton visible="false" id="updateGraphHeight" action="#{ExploreDataPage.update_GraphHeight}"/>
<ice:commandButton visible="false" id="updateEndYear" action="#{ExploreDataPage.update_EndYear}"/>
<ice:commandButton visible="false" id="updateIndexYear" action="#{ExploreDataPage.update_IndexYear}"/>

    <div class="dvn_section">
        <div jsfc="ice:panelGroup" styleClass="dvnMsgBlockRound dvnInformationMessage">
            <div class="dvnMsgBlockContainer">
                <p>
                    <ice:outputText value="(Please report any issues found in our open beta release of Explore Data to the Network Administrator using the &lt;a href=&#34;/dvn#{VDCRequest.currentVDCURL}/faces/ContactUsPage.xhtml&#34;&gt;Contact&lt;/a&gt; form.)" escape="false"/>
                </p>
            </div>
        </div>
        <div class="dvnstudytitleblock">
            <div class="dvnstudyadminboxfloat dvn_right">
                <ice:outputLink
                    rendered="#{ExploreDataPage.versionNumber==null}"
                    value="/dvn#{VDCRequest.currentVDCURL}/faces/study/StudyPage.xhtml?studyId=#{ExploreDataPage.studyId}&amp;tab=files#{VDCRequest.studyListingIndexAsParameter}">
                <ice:outputText
                    value="Back to Study"/>
                </ice:outputLink>
                <ice:outputLink
                    rendered="#{ExploreDataPage.versionNumber!=null}"
                    value="/dvn#{VDCRequest.currentVDCURL}/faces/study/StudyPage.xhtml?studyId=#{ExploreDataPage.studyId}&amp;tab=files&amp;versionNumber=#{ExploreDataPage.versionNumber}#{VDCRequest.studyListingIndexAsParameter}">
                <ice:outputText
                    value="Back to Study"/>
                </ice:outputLink>
            </div>
            <ui:include src="/study/StudyTitleFragment.xhtml">
                <ui:param name="studyUI" value="#{ExploreDataPage.studyUI}"/>
                <ui:param name="displayReleaseLink" value="false"/>
                <ui:param name="displayVersionInfo" value="true"/>
                <ui:param name="displayStatusBox" value="true"/>
                <ui:param name="displayFileName" value="#{ExploreDataPage.fileName}"/>
            </ui:include>
        </div>

        <div class="dvnGraphForm">
            <div class="dvnGraphIndicatorBlock">

                <div jsfc="ice:panelGroup" styleClass="dvnGraphIndicatorSelect" rendered="#{!empty ExploreDataPage.selectMeasureGroupTypes}">
                    <ice:outputLabel value="#{ExploreDataPage.measureTypeCue}" for="indicatortype"/>
                    <ice:selectOneMenu immediate="false" partialSubmit="true" id="issue"
                                       valueChangeListener="#{ExploreDataPage.reset_MeasureItems}" value="#{ExploreDataPage.groupTypeId}">
                        <f:selectItem itemLabel="Select..." itemValue="0"/>
                        <f:selectItems value="#{ExploreDataPage.selectMeasureGroupTypes}"/>
                    </ice:selectOneMenu>
                </div>
                <div class="dvnGraphIndicatorSelect">
                    <ice:outputLabel value="#{ExploreDataPage.measureLabel}" for="indicator"/>

                    <ice:selectOneMenu id="indicatorMenu" value="#{ExploreDataPage.selectedMeasureId}" partialSubmit="true" valueChangeListener="#{ExploreDataPage.resetFiltersForMeasure}">
                        <f:selectItem itemLabel="Select..." itemValue="0"/>
                        <f:selectItems value="#{ExploreDataPage.selectMeasureItems}"/>
                    </ice:selectOneMenu>
                </div>
            </div>

            <div jsfc="ice:panelGroup" styleClass="dvnGraphFilterBlock" rendered="#{ExploreDataPage.selectedMeasureId > 0 and ExploreDataPage.selectedMeasureHasFilters}">
                <div jsfc="ice:panelGroup" styleClass="dvnGraphFilterInfoBlock" rendered="#{ExploreDataPage.selectedMeasureHasFilterTypes}">
                    <ice:graphicImage value="/resources/images/icon_info.gif" styleClass="dvn_icon"/>
                    <ice:outputText value=" Use check boxes to narrow drop-down menu."/>
                </div>

                <div jsfc="ice:panelSeries" id="filterPanelGroupings" var="item" value="#{ExploreDataPage.filterGroupings}" binding="#{ExploreDataPage.filterPanelGroup}">
                    <f:attribute name="groupingId" value="#{item.varGrouping.id}"/>
                    <div class="dvnGraphFilterBlock">
                        <div class="dvnGraphFilterLabelBlock">
                            <ice:outputLabel value="#{item.varGrouping.name}"/>

                            <ice:selectOneMenu id="filterGroup" styleClass="filterGroup" value="#{item.selectedGroupId}" partialSubmit="true"  valueChangeListener="#{ExploreDataPage.updateLineLabelForFilter}">
                                <f:selectItem itemLabel="Select..." itemValue="0"/>
                                <f:selectItems value="#{ExploreDataPage.selectFilterGroups}"/>
                            </ice:selectOneMenu>
                        </div>
                        
                        <div jsfc="ice:panelSeries" value="#{item.varGroupTypesUI}" styleClass="dvnGraphFilterTypesBlock" id="filterPanelGroupTypes" var="groupType">
                            <!-- controls -->
                            <div jsfc="ice:panelGroup" styleClass="dvnGraphFilterTypesControls">
                                <ice:selectBooleanCheckbox value="#{groupType.enabled}" partialSubmit="true"
                                                           id="filterGroupTypeCheckBoxes" styleClass="filterGroupTypeCheckBoxes"/>
                                <ice:outputLabel value="#{groupType.varGroupType.name}"/>
                            </div>
                        </div>
                        <ice:message for="filterPanelGroupTypes" id="boxErrorMsg" styleClass="errorMessage"/>
                    </div>
                </div>
            </div>

            <div class="dvnGraphLabelBlock">
                <div>
                    <ice:outputLabel value="Label" for="graphlinelabel"/>
                    <ice:inputText id="graphlinelabel" value="#{ExploreDataPage.lineLabel}" binding="#{ExploreDataPage.inputLineLabel}"></ice:inputText>
                </div>
                <div>
                    <ice:commandButton id="addLineButton" value="Add Line" binding="#{ExploreDataPage.addLineButton}" actionListener="#{ExploreDataPage.addLine}"/>
                    <ice:message for="addLineButton" id="boxErrorMsg" styleClass="errorMessage"/>
                    <ice:commandButton id="removeAllButton" value="Refresh" styleClass="dvnGraphRemoveLinesButton" actionListener="#{ExploreDataPage.removeAllLines}"/>
                </div>
            </div>
        </div>

        <div jsfc="ice:panelGroup" styleClass="dvnGraphResults">
            <div jsfc="ice:panelGroup" rendered="#{!empty ExploreDataPage.vizLines}" styleClass="dvnGraphBox">
                <div jsfc="ice:panelGroup" styleClass="dvnGraphWarningBlock" rendered="#{!empty ExploreDataPage.forcedIndexMessage}">
                    <ice:graphicImage value="/resources/images/icon_warning.18.png" styleClass="dvn_icon"/>
                    <ice:outputText styleClass="vdcHelpText" value=" #{ExploreDataPage.forcedIndexMessage}"/>
                </div>
                <div jsfc="ice:panelGroup" styleClass="dvnGraphTitleBlock" rendered="#{!empty ExploreDataPage.graphTitle  
                                                                                       and (ExploreDataPage.displayType == 1 or ExploreDataPage.displayType == 3) }">
                    <ice:outputLabel value="#{ExploreDataPage.graphTitle}" />                   
                </div>
                <div jsfc="ice:panelGroup" styleClass="dvnGraphTitleBlock" rendered="#{!empty ExploreDataPage.yAxisLabel 
                                                                                        and (ExploreDataPage.displayType == 1 or ExploreDataPage.displayType == 3)}">
                    <ice:outputLabel value="#{ExploreDataPage.yAxisLabel}" />                   
                </div>
                <div id="chart_div" rendered="#{ExploreDataPage.displayType == 1   or ExploreDataPage.displayType == 3}"></div>
                <div jsfc="ice:panelGroup" styleClass="dvnGraphSourceBlock" rendered="#{!empty ExploreDataPage.sources   
                                                                                        and (ExploreDataPage.displayType == 1 or ExploreDataPage.displayType == 3)}">
                    <ice:outputText value="Source: #{ExploreDataPage.sources}"/>
                </div>
            </div>

            <div jsfc="ice:panelGroup" rendered="#{!empty ExploreDataPage.vizLines}" styleClass="dvnGraphDisplay">

                <ice:panelTabSet id="tabSet1" styleClass="dvnTabs">

                    <ice:panelTab id="display" label="Display">
                        <div jsfc="ice:panelGroup" id="layoutPanel2" panelLayout="flow">
                            <div class="dvnGraphDisplayBlock">
                                <div>
                                    <ice:outputLabel value="Display" for="graphdisplay"/>
                                    <ice:selectOneMenu id="graphdisplay" binding="#{ExploreDataPage.selectGraphType}" onchange="updateDisplayType();" value="#{ExploreDataPage.displayType}" >
                                        <f:selectItems value="#{ExploreDataPage.selectView}"/>
                                    </ice:selectOneMenu>
                                </div>
                                <div>
                                    <ice:outputLabel value="Title" for="graphtitleIn"/>
                                    <ice:inputText id="graphTitleIn" size="38" binding="#{ExploreDataPage.inputGraphTitle}"
                                                   value ="#{ExploreDataPage.graphTitle}"
                                                   onkeyup="delayedRequestTitle(form,this,event);"></ice:inputText>
                                </div>

                                <div class="dvnShowHeightBlock">
                                    <ice:outputLabel value="Graph Height" for="displayHeight" rendered="true"/>
                                    <ice:selectOneRadio id="displayHeightRadio" styleClass="displayHeightRadio" onclick="resetHeight();" value="#{ExploreDataPage.heightInt}" 
                                                        binding ="#{ExploreDataPage.selectGraphHeight}">
                                        <f:selectItem itemLabel="Tall" itemValue="1" />
                                        <f:selectItem itemLabel="Standard" itemValue="2" />
                                        <f:selectItem itemLabel="Short" itemValue="3" />
                                    </ice:selectOneRadio>
                                </div>
                                <div class="dvnShowLegendBlock">
                                    <ice:outputLabel value="Legend Location" for="displayLegend" rendered="true"/>
                                    <ice:selectOneRadio id="displayLegendRadio" styleClass="displayLegendRadio" onclick="resetLegend();" value="#{ExploreDataPage.legendInt}" 
                                                        binding ="#{ExploreDataPage.selectLegendPosition}">
                                        <f:selectItem itemLabel="Right" itemValue="1" />
                                        <f:selectItem itemLabel="Bottom" itemValue="2" />
                                        <f:selectItem itemLabel="None" itemValue="3" />
                                    </ice:selectOneRadio>
                                </div>
                            </div>

                            <div class="dvnGraphTimeSeriesBlock">
                                <ice:outputLabel value="Time Series" for="graphtimeseries" styleClass="dvnGraphTimeSeriesTitle"/>
                                <div>
                                    <ice:outputLabel value="Start" for="graphstart" rendered="true"/>
                                    <ice:selectOneMenu id="graphstart" rendered="true" binding="#{ExploreDataPage.selectStartYear}" value="#{ExploreDataPage.startYear}" onchange="updateStartYear();">
                                        <f:selectItems value="#{ExploreDataPage.selectBeginYears}"/>
                                    </ice:selectOneMenu>
                                </div>
                                <div>
                                    <ice:outputLabel value="End" for="graphend" rendered="true"/>
                                    <ice:selectOneMenu id="graphend" rendered="true" binding="#{ExploreDataPage.selectEndYear}" value="#{ExploreDataPage.endYear}" onchange="updateEndYear();">
                                         <f:selectItems value="#{ExploreDataPage.selectEndYears}"/>
                                    </ice:selectOneMenu>
                                </div>

                            </div>

                            <div class="dvnGraphIndicesBlock">
                                <ice:outputLabel value="Indices" for="graphindices" styleClass="dvnGraphIndicesTitle"/>
                                <div>
                                    <ice:selectBooleanCheckbox id="displayindices" value="#{ExploreDataPage.displayIndexes}" binding="#{ExploreDataPage.useIndicesCheckBox}"
                                                               disabled="#{!empty ExploreDataPage.forcedIndexMessage}" onchange="resetIndices();"/>
                                    <ice:outputLabel value="Display Series as Indices" for="displayindices" rendered="true"/>
                                   
                                </div>
                                <ice:outputLabel value="Select Reference Period" for="selectreferenceperiod" rendered="true"/>
                                <ice:selectOneMenu disabled="#{!ExploreDataPage.displayIndexes}" value="#{ExploreDataPage.indexDate}"
                                                   id="selectreferenceperiod" rendered="true" onchange="updateIndexYear();"  
                                                    binding="#{ExploreDataPage.selectIndexYear}">
                                    <f:selectItems value="#{ExploreDataPage.selectIndexDate}"/>
                                </ice:selectOneMenu>
                                
                            </div>
                        </div>
                    </ice:panelTab>

                    <ice:panelTab id="lineDetails" label="Line Details">
                        <div jsfc="ice:panelGroup" id="layoutPanel1" panelLayout="flow" styleClass="dvnGraphResultsLineBox">

                            <ice:dataTable width="100%" cellspacing="0" cellpadding="0" var="line" styleClass="dvnGraphResultsVizLineTable"
                                           value="#{ExploreDataPage.vizLines}" binding="#{ExploreDataPage.dataTableVizLines}">
                              <h:column>
                                  <div class="dvnGraphResultsVizLineBlock">
                                    <div class="dvnGraphResultsVizLineWrap">
                                      <div class="dvnGraphResultsVizLineLabelBlock">
                                        <div class="dvnGraphResultsVizLineColor" style="#{line.border}"></div>
                                        <ice:outputText styleClass="dvnGraphResultsVizLineLabel" value="#{line.label}"/>
                                        <div class="dvnGraphResultsVizLineEditBlock">
                                            <ice:inputText  binding="#{ExploreDataPage.inputTextLineLabel}">
                                            </ice:inputText>
                                            <ice:commandButton value="Save" onclick="" actionListener="#{ExploreDataPage.updateLineLabel}"/> 
                                        </div>
                                      </div>
                                      <div class="dvnGraphResultsVizLineActions">
                                        <ice:commandLink id="deleteLineLink" title="Delete Line" value="Delete [X]" actionListener="#{ExploreDataPage.deleteLine}" onclick="deleteLine();"></ice:commandLink>
                                        <a href="#" class="dvnGraphResultsVizLineEditLink">Edit Label</a>
                                      </div>
                                    </div>

                                    <div class="lineDetailBlock">
                                        <div>
                                            <ice:outputText style="display: inline;" styleClass="lineDetailBlockLabel" value="#{line.measureLabel}: "/>
                                            <ice:outputText style="display: inline;" value="#{line.measureGroup.name}"/>
                                        </div>
                                        <ice:dataTable id="lineListPanelSeries" binding="#{ExploreDataPage.dataTableFilterGroups}"
                                                       var="filterGroup" value="#{line.filterGroups}">
                                            <h:column>
                                            <div>
                                                <ice:outputText style="display: inline;" styleClass="lineDetailBlockFilter" value="#{filterGroup.groupAssociation.name}: "/>
                                                <ice:outputText style="display: inline;" value="#{filterGroup.name}"/>
                                            </div>
                                            </h:column>
                                        </ice:dataTable>
                                        <ice:commandLink rendered="#{line.variableLabel!=null}" actionListener="#{ExploreDataPage.openVariableInfoPopup}">
                                            <ice:outputText value="#{ExploreDataPage.sourceLineLabel}"/>
                                        </ice:commandLink>
                                    </div>
                                </div>
                              </h:column>
                                <f:facet name="footer">
                                    <script type="text/javascript">
                                      // <![CDATA[
                                        jQuery(document).ready(function(){
                                            jQuery("a.dvnGraphResultsVizLineEditLink").click(function() {
                                                jQuery(this).parent().prev().addClass("edit");
                                                return false;
                                            });
                                            jQuery(".dvnGraphResultsVizLineEditBlock input:submit").click(function() {
                                                jQuery(this).parents(".dvnGraphResultsVizLineLabelBlock").removeClass("edit");
                                                return false;
                                            });
                                        });
                                        // ]]>
                                    </script>
                                </f:facet>
                            </ice:dataTable>

                        </div>
                    </ice:panelTab>

                    <ice:panelTab id="export" label="Export">
                        <div jsfc="ice:panelGroup" id="layoutPanel3" panelLayout="flow" styleClass="dvnGraphExportBlock">
                            <ice:outputLabel value="Export" for="graphexport"/>

                            <div class="dvnExportBtmWrp">
                                <div>
                                    <ice:selectBooleanCheckbox id="downloadImageGraph"
                                                               value="#{ExploreDataPage.includeImage}"
                                                               visible="#{ExploreDataPage.imageAvailable}"
                                                               partialSubmit="true" />
                                    <ice:outputLabel value="Image Graph" for="downloadImageGraph" rendered="true" visible="#{ExploreDataPage.imageAvailable}" styleClass="dvnFormElementMargin"/>
                                    <ice:selectBooleanCheckbox id="downloadPDFGraph"
                                                               value="#{ExploreDataPage.includePdf}"
                                                               visible="#{ExploreDataPage.imageAvailable}"
                                                               partialSubmit="true" />
                                    <ice:outputLabel value="PDF Graph" for="downloadPDFGraph" rendered="true" visible="#{ExploreDataPage.imageAvailable}"/>
                                </div>
                                <div>
                                    <ice:selectBooleanCheckbox id="downloadDataCSV"
                                                               value="#{ExploreDataPage.includeCSV}"
                                                               partialSubmit="true"/>
                                    <ice:outputLabel value="Raw Data CSV" for="downloadDataCSV" rendered="true" styleClass="dvnFormElementMargin"/>
                                    <ice:selectBooleanCheckbox id="downloadDataExcel" binding="#{ExploreDataPage.dataExcelCheckBox}"
                                                               value="#{ExploreDataPage.includeExcel}"
                                                               visible="#{ExploreDataPage.dataTableAvailable}"
                                                               partialSubmit="true" />
                                    <ice:outputLabel value="Excel File" for="downloadDataExcel" rendered="true" visible="#{ExploreDataPage.dataTableAvailable}"/>
                                </div>
                                <ice:message for="downloadDataExcel" id="boxErrorMsgExcel" styleClass="errorMessage"/>
                                <div class="dvnFormButtonMargin">
                                    <ice:commandButton visible="true" value="Export Results" id="exportResults" type="submit" onclick="startDownload();" />
                                      <ice:outputResource label="Export" type="button" style="display:none;"
                                           id="downloadImage" mimeType="application/png"
                                           resource="#{ExploreDataPage.downloadImage}" shared="false"/>
                                      <ice:outputResource label="Export" type="button" style="display:none;"
                                           id="downloadPDF" mimeType="application/pdf"
                                           resource="#{ExploreDataPage.downloadPDF}" shared="false"/>
                                      <ice:outputResource label="Export" type="button" style="display:none;"
                                           id="downloadCSV" mimeType="text/comma-separated-values"
                                           resource="#{ExploreDataPage.downloadCSV}" shared="false"/>
                                      <ice:outputResource label="Export" type="button" style="display:none;"
                                           id="downloadExcel" mimeType="application/vnd.ms-excel"
                                           resource="#{ExploreDataPage.downloadExcel}" shared="false"/>
                                      <ice:outputResource label="Export" type="button" style="display:none;"
                                           id="downloadZip" mimeType="application/zip"
                                           resource="#{ExploreDataPage.downloadZip}" shared="false"/>
                                </div>
                            </div>
                        </div>
                    </ice:panelTab>
                </ice:panelTabSet>
                
               <ice:panelPopup id="variableInfoPopup"
                            visible="#{ExploreDataPage.showVariableInfoPopup}"
                            draggable="true" modal="true"
                            positionOnLoadOnly="true" autoCentre="true"
                            styleClass="variableInfoPopup">
                <f:facet name="header">
                    <ice:panelGroup styleClass="popupHeaderWrapper">
                        <ice:outputText value="#{ExploreDataPage.sourceLineLabel}" styleClass="popupHeaderText"/>
                        <ice:commandLink value="Close [X]" actionListener="#{ExploreDataPage.closeVariableInfoPopup}" styleClass="popupHeaderClose"></ice:commandLink>
                    </ice:panelGroup>
                </f:facet>
                <f:facet name="body">
                    <ice:panelGroup styleClass="popupBody">
                        #{ExploreDataPage.variableLabel}
                        <br/>
                    </ice:panelGroup>                    
                </f:facet>
               </ice:panelPopup>

            </div>
        </div>
    </div>
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <!--<script type="text/javascript" src="http://api.timepedia.org/gviz/"></script>-->

    <script type="text/javascript">
// <![CDATA[
    google.load('visualization', '1', {'packages':['annotatedtimeline']});
    google.load('visualization', '1', {packages:['table']});
    google.load("visualization", "1", {packages:["imagebarchart"]});
    google.load('visualization', '1', {packages:['imagelinechart']});
    var legendString = "";

    var timeout= 600; //milliseconds to wait for no activity
    var countEvents= 0;
    var delay = 500;
    var calcedStartYear = 0;
    var calcedEndYear = 0;
    function delayedRequestTitle(form,field,event){
    countEvents++;
    setTimeout(function() {
    countEvents--;
    if(countEvents==0){
        document.getElementById('ExploreDataPage:updateGraphTitle').click();
    }
    },timeout);

    }

function initDisplayLegend() {
    
    var rightLegendChecked = jQuery('.displayLegendRadio input[value=1]:checked')
    var bottomLegendChecked = jQuery('.displayLegendRadio input[value=2]:checked')
    var noLegendChecked = jQuery('.displayLegendRadio input[value=3]:checked')
    
    if (rightLegendChecked) {
        jQuery(rightLegendChecked).parents('.dvnGraphResults').children('.dvnGraphBox').children('#chart_div').addClass('rightlabel');
    }
    if (bottomLegendChecked) {
        jQuery(bottomLegendChecked).parents('.dvnGraphResults').children('.dvnGraphBox').children('#chart_div').removeClass('rightlabel');
    }
    if (noLegendChecked) {
        jQuery(noLegendChecked).parents('.dvnGraphResults').children('.dvnGraphBox').children('#chart_div').removeClass('rightlabel');
    }
}

function getXaxisString(startYear, endYear)
{
    var myDataString = new String (document.getElementById('ExploreDataPage:dataString').textContent);
    var startRange = 0;
    var endRange = 0;
    var yearLabelInt = 0;
    var myRowList = myDataString.split ( ';' );
    var retString = "|";
    
    if (endYear - startYear <=7){
        
        for (i=0; i< myRowList.length -1 ;i++)
        {   
            var myRow = myRowList[i];
            var myRowParse = myRow.split ( ',' );
            var yearNum = parseInt(myRowParse[0]);
            if (yearNum >= startYear && yearNum <= endYear ){
                retString= retString + '|' + yearNum + '|'; 
            }
        }
        
        
    } else {
        if (startYear != 0 && endYear !=3000){ 
            yearLabelInt = Math.round((endYear-startYear)/7); 
                calcedStartYear = startYear;
                calcedEndYear = endYear;
        }
        else {
            for (i=0; i< myRowList.length -1 ;i++)
            { var myRow = myRowList[i];
                var myRowParse = myRow.split ( ',' );
                var yearNum = parseInt(myRowParse[0]);
                if (i==0){ 
                    startRange = yearNum; 
                } 
                endRange = yearNum; 
            }
            
                calcedStartYear = startRange;
                calcedEndYear = endRange;

            yearLabelInt = Math.round((endRange-startRange)/7); 
        }

        var counter = yearLabelInt;
        for (i=0; i< myRowList.length -1 ;i++)
        {   var yearPrint = false; 
            var myRow = myRowList[i];
            var myRowParse = myRow.split ( ',' );
            var yearNum = parseInt(myRowParse[0]);
            if (i== 0 || counter == 0 )
            { counter = yearLabelInt; yearPrint = true; }
            counter--;
            if (yearNum >= startYear && yearNum <= endYear ){ 
                if (yearPrint){ 
                    retString= retString + yearNum + '|'; 
                }
                else { retString = retString + '|'; 
                } 
            } 
        }
        
    }
    
    

    return retString;
}

function getLegendString(columnString){
    legendString = "";
        var buttonVal = getRadioValue("displayLegendRadio");
        if (buttonVal == 3){
           return legendString;
        }
    var myString = columnString;
    var myColumnList = myString.split ( '^' );
    for (var i=0; i< myColumnList.length ;i++)
    { 
        var myColumn = myColumnList[i];
            if(legendString==""){
                legendString = escape(myColumn);                
            } else {
                legendString = legendString + "|" + escape(myColumn);
            }
    }

    return legendString;
}


 function parseData(data, intDisType, startYear, endYear, indexed, columnString) {

        var myString = columnString;
        var myColumnList = myString.split ( '^' );
        if (indexed){           
            var myDataString = new String (document.getElementById('ExploreDataPage:indexedDataString').textContent);
        } else {
            var myDataString = new String (document.getElementById('ExploreDataPage:dataString').textContent);
        }

        var myRowList = myDataString.split ( ';' );

        var numColumnsStr =  new String (document.getElementById('ExploreDataPage:dataColumns').textContent);
        var numColumns = parseInt(numColumnsStr);
        
            legendString="";
    for (i=0; i< myColumnList.length ;i++)
    { 
        var myColumn = myColumnList[i];
        if (i==0 ){
            if (intDisType == 1){
                data.addColumn('date', myColumn);
            }
            if (intDisType == 2){
                data.addColumn('string', myColumn);               
            }
            if (intDisType == 3){
                data.addColumn('string', myColumn);
            }

        } else {
            if (intDisType ==1){
                data.addColumn('number', "");
            } else {
                data.addColumn('number', myColumn);
            }
            if(legendString==""){
                legendString = escape(myColumn);                
            } else {
                legendString = "|" + escape(myColumn);
            }

        }
    }
    var startRange = 0;
    var endRange = 0;
       var yearLabelInt = 0
    if (startYear != 0 && endYear !=3000){
       yearLabelInt = Math.round((endYear-startYear)/5);
    } else {
            for (i=0; i< myRowList.length -1 ;i++){
                var myRow = myRowList[i];
                var myRowParse = myRow.split ( ',' );
                var yearNum = parseInt(myRowParse[0]);
                if (i==0){
                    startRange = yearNum;
                }
                endRange = yearNum;

            }
       yearLabelInt = Math.round((endRange-startRange)/5);
    }
    
    if (startYear == 0){
        calcedStartYear = startRange;
    } else {
        calcedStartYear = startYear;
    }
    
    if (endYear == 3000){
        calcedEndYear = endRange;
    } else {
        calcedEndYear = endYear;
    }

    
    var counter = yearLabelInt;
       
    for (i=0; i< myRowList.length -1 ;i++)
    {

        var yearPrint = false;
        var myRow = myRowList[i];
        var myRowParse = myRow.split ( ',' );
        var yearNum = parseInt(myRowParse[0]);
        if (i== 0 || counter == 0  ){
           counter = yearLabelInt;
           yearPrint = true;
        }

        counter--;

            var myString = new String (document.getElementById('ExploreDataPage:columnString').textContent);
            var myColumnList = myString.split ( '^' );
            var numColumnsStr =  new String (document.getElementById('ExploreDataPage:dataColumns').textContent);
            var numColumns = parseInt(numColumnsStr);

        if (yearNum >= startYear && yearNum <= endYear ) {
            if (numColumns == 1){
                addRows1(data, myRow, intDisType, yearPrint);
            }
            if (numColumns == 2){
                addRows2(data, myRow, intDisType, yearPrint);
            }
            if (numColumns == 3){
                addRows3(data, myRow, intDisType, yearPrint);
            }
            if (numColumns == 4){
                addRows4(data, myRow, intDisType, yearPrint);
            }
            if (numColumns == 5){
                addRows5(data, myRow, intDisType, yearPrint);
            }
            if (numColumns == 6){
                addRows6(data, myRow, intDisType, yearPrint);
            }
            if (numColumns == 7){
                addRows7(data, myRow, intDisType, yearPrint);
            }
            if (numColumns == 8){
                addRows8(data, myRow, intDisType, yearPrint);
            }

        }

     }
}
      function addRows1(dataTable, rowList, intDisType, year) {
          var myRowParse = rowList.split ( ',' );
          var dollNum = myParseFloat(myRowParse[1]);

          var dateReturn = myParseXaxis(myRowParse[0],intDisType, year);
          dataTable.addRow([dateReturn, dollNum]);

      }

      function addRows2(dataTable, rowList, intDisType, year) {
          var myRowParse = rowList.split ( ',' );
          var dateReturn = myParseXaxis(myRowParse[0],intDisType, year);
          var dollNum = myParseFloat(myRowParse[1]);
          var dollNum2 = myParseFloat(myRowParse[2]);
          dataTable.addRow([dateReturn, dollNum, dollNum2]);

      }

      function addRows3(dataTable, rowList, intDisType, year) {
          var myRowParse = rowList.split ( ',' );
          var dateReturn = myParseXaxis(myRowParse[0],intDisType, year);
          var dollNum = myParseFloat(myRowParse[1]);
          var dollNum2 = myParseFloat(myRowParse[2]);
          var dollNum3 = myParseFloat(myRowParse[3]);
          dataTable.addRow([dateReturn, dollNum, dollNum2, dollNum3]);
      }

      function addRows4(dataTable, rowList, intDisType, year) {
          var myRowParse = rowList.split ( ',' );
          var dateReturn = myParseXaxis(myRowParse[0],intDisType, year);
          var dollNum = myParseFloat(myRowParse[1]);
          var dollNum2 = myParseFloat(myRowParse[2]);
          var dollNum3 = myParseFloat(myRowParse[3]);
          var dollNum4 = myParseFloat(myRowParse[4]);
          dataTable.addRow([dateReturn, dollNum, dollNum2, dollNum3, dollNum4]);
      }

      function addRows5(dataTable, rowList, intDisType, year) {
          var myRowParse = rowList.split ( ',' );
          var dateReturn = myParseXaxis(myRowParse[0],intDisType, year);
          var dollNum = myParseFloat(myRowParse[1]);
          var dollNum2 = myParseFloat(myRowParse[2]);
          var dollNum3 = myParseFloat(myRowParse[3]);
          var dollNum4 = myParseFloat(myRowParse[4]);
          var dollNum5 = myParseFloat(myRowParse[5]);
          dataTable.addRow([dateReturn, dollNum, dollNum2, dollNum3, dollNum4, dollNum5]);
      }

      function addRows6(dataTable, rowList, intDisType, year) {
          var myRowParse = rowList.split ( ',' );
          var dateReturn = myParseXaxis(myRowParse[0],intDisType, year);
          var dollNum = myParseFloat(myRowParse[1]);
          var dollNum2 = myParseFloat(myRowParse[2]);
          var dollNum3 = myParseFloat(myRowParse[3]);
          var dollNum4 = myParseFloat(myRowParse[4]);
          var dollNum5 = myParseFloat(myRowParse[5]);
          var dollNum6 = myParseFloat(myRowParse[6]);
          dataTable.addRow([dateReturn, dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6]);
      }

      function addRows7(dataTable, rowList, intDisType, year) {
          var myRowParse = rowList.split ( ',' );
          var dateReturn = myParseXaxis(myRowParse[0],intDisType, year);
          var dollNum = myParseFloat(myRowParse[1]);
          var dollNum2 = myParseFloat(myRowParse[2]);
          var dollNum3 = myParseFloat(myRowParse[3]);
          var dollNum4 = myParseFloat(myRowParse[4]);
          var dollNum5 = myParseFloat(myRowParse[5]);
          var dollNum6 = myParseFloat(myRowParse[6]);
          var dollNum7 = myParseFloat(myRowParse[7]);
          dataTable.addRow([dateReturn, dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6, dollNum7]);
      }

      function addRows8(dataTable, rowList, intDisType, year) {
          var myRowParse = rowList.split ( ',' );
          var dateReturn = myParseXaxis(myRowParse[0],intDisType, year);
          var dollNum = myParseFloat(myRowParse[1]);
          var dollNum2 = myParseFloat(myRowParse[2]);
          var dollNum3 = myParseFloat(myRowParse[3]);
          var dollNum4 = myParseFloat(myRowParse[4]);
          var dollNum5 = myParseFloat(myRowParse[5]);
          var dollNum6 = myParseFloat(myRowParse[6]);
          var dollNum7 = myParseFloat(myRowParse[7]);
          var dollNum8 = myParseFloat(myRowParse[8]);
          dataTable.addRow([dateReturn, dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6, dollNum7, dollNum8]);
      }


function myParseFloat(floatIn){

    if(!isNaN(parseFloat(floatIn))){
            return parseFloat(floatIn);
    } else {
        return null;
    }
}

function myParseXaxis(dataIn, intDisType, year){

    var myDateList = dataIn.split('-');


    if (intDisType == 1){
        var yearOut = parseInt(myDateList[0]);
        var moOut = 0
        var dayOut = 1;

        var countDashes = dataIn.split("-").length
        if (countDashes ==3){
            if (myDateList[1].length > 0){
                moOut = parseInt(myDateList[1]) - 1;
            }

            if (myDateList[2].length > 0){
                dayOut = parseInt(myDateList[2]);
            }
        }



        var dateOut = new Date(yearOut, moOut, dayOut);
        return dateOut;

    } 
    if (intDisType == 2 || intDisType == 3  ) {
        if (year  || intDisType == 3 ) {
            var countDashes = dataIn.split("-").length
            if (countDashes == 3){
                return myDateList[1] + "/" + myDateList[2].substring(0, 2)
                    + "/" + myDateList[0];

            } else{
                return myDateList[0];
            }
        } else {
            return null;
        }
    }

    var yearInt = parseInt(myDateList[0]) ;
    return yearInt;
}

function changeheight(intHeightCode){
    var height = 550;
    var e=document.getElementById("chart_div");
    if (intHeightCode == 1) height = 590;
    if (intHeightCode == 3) height = 450;    

        e.style.height = height;
    }



function drawVisualization() {

      document.getElementById('ExploreDataPage:hasURL').value = "false";
      var displayType = new String (document.getElementById('ExploreDataPage:displayType').textContent);      
      var useIndex = false;      
      if (document.getElementById('ExploreDataPage:displayIndicesHidden') != null){
          useIndex = document.getElementById('ExploreDataPage:displayIndicesHidden').checked;
      }
      
      if (!useIndex){
          var axisLabel = new String (document.getElementById('ExploreDataPage:imageAxisLabelNoYLabel').textContent);
          var displaySourceFooter = new String (document.getElementById('ExploreDataPage:displaySourceFooterNoYLabel').textContent);
          var transDataIn = document.getElementById('ExploreDataPage:transformedData').textContent;
          var highValStandardIn = new String (document.getElementById('ExploreDataPage:highValStandard').textContent);
          var highValDouble = parseFloat(highValStandardIn) * 1.1;
          var lowValStandardIn = new String (document.getElementById('ExploreDataPage:lowValStandard').textContent);
          var lowValDouble = parseFloat(lowValStandardIn) * 0.8; 
      } else {
          var axisLabel = new String (document.getElementById('ExploreDataPage:imageAxisLabelNoYLabel').textContent);
          var displaySourceFooter = new String (document.getElementById('ExploreDataPage:displaySourceFooterNoYLabel').textContent);
          var transDataIn = document.getElementById('ExploreDataPage:transformedDataIndexed').textContent;
          var highValStandardIn = new String (document.getElementById('ExploreDataPage:highValIndexed').textContent);
          var highValDouble = parseFloat(highValStandardIn) * 1.1;
          var lowValStandardIn = new String (document.getElementById('ExploreDataPage:lowValIndexed').textContent);
          var lowValDouble = parseFloat(lowValStandardIn) * 0.8; 
      }

      
      var defaultView = new String (document.getElementById('ExploreDataPage:defaultView').textContent);
      var intDefaultView = parseInt(defaultView);
      
      var intDisType = parseInt(displayType);
      if (intDisType == 0){
          if (intDefaultView ==0){
              intDisType = 2;
          } else {
              intDisType = intDefaultView;
          }          
      }

      var transDataInLines = transDataIn.split(";");
      var encoded = "";
            for (var i=0; i< transDataInLines.length  ;i++){
                var line = transDataInLines[i];
                var lineParse = line.split ( ',' );
                if (i>0){
                    encoded = encoded + ",";
                }
                encoded = encoded +  extendedEncode(lineParse, highValDouble,  lowValDouble);
            }
            
      var startYear = new String (document.getElementById('ExploreDataPage:startYear').textContent);

      document.getElementById('ExploreDataPage:tabSet1:0:hiddenDataDownload')
      var myDateList = startYear.split('-');
      var intStartYear = parseInt(myDateList[0]);
      var endYear = new String (document.getElementById('ExploreDataPage:endYear').textContent);
      myDateList = endYear.split('-');
      var intEndYear = parseInt(myDateList[0]);
      
      var heightValIn = new String (document.getElementById('ExploreDataPage:heightInt').textContent);
      var heightValIn1 = parseInt(heightValIn);
      changeheight(heightValIn1);
      
      var buttonValIn = new String (document.getElementById('ExploreDataPage:legendInt').textContent);
      var buttonValIn1 = parseInt(buttonValIn);
      
      var legendAlignment = 'r';
        if (buttonValIn1 == 2){
           legendAlignment = 'b';
        }
        if (buttonValIn1 == 3){
           legendAlignment = 'none';
        }
      var data = new google.visualization.DataTable();
      var data3 = new google.visualization.DataTable();
      var colStr = new String (document.getElementById('ExploreDataPage:columnString').textContent);
      parseData(data, intDisType, intStartYear, intEndYear, useIndex, colStr);
      var icolStr = new String (document.getElementById('ExploreDataPage:imageColumnString').textContent);
      
            var displayTitle = new String (document.getElementById('ExploreDataPage:graphTitleHidden').textContent); 
            var yAxisStringParam = new String (document.getElementById('ExploreDataPage:yAxisLabel').textContent);
            var sourceStringParam =  new String (document.getElementById('ExploreDataPage:sourceText').textContent);
            var chartBaseUrl = "http://chart.apis.google.com/chart?";
            var chartParams = "cht=lc&chco=4684EE,DC3912,FF9900,008000,4942CC,990099,FF80F2,7FD127";
            if (heightValIn1 == 1){
                chartParams = chartParams + "&chs=676x440";  
            }
            
            if (heightValIn1 == 2){
                chartParams = chartParams + "&chs=676x400";  
            }
            
            if (heightValIn1 == 3){
                chartParams = chartParams + "&chs=676x300";  
            }
                       
            if ((highValDouble - lowValDouble) >= 10){
               chartParams = chartParams + "&chxs=1N*sz0*,000000|0N*0*,000000|2N,000000|3N,000000|4N,000000"; 
            } 
            if ((highValDouble - lowValDouble) < 10  && (highValDouble - lowValDouble) >= 4 ) {
               chartParams = chartParams + "&chxs=1N*sz1*,000000|0N*0*,000000|2N,000000|3N,000000|4N,000000";  
            }
            if ((highValDouble - lowValDouble) < 4 ) {
               chartParams = chartParams + "&chxs=1N*sz2*,000000|0N*0*,000000|2N,000000|3N,000000|4N,000000";  
            }
            chartParams = chartParams + "&chxt="+axisLabel;
            var labelString = escape( displaySourceFooter);   
            chartParams = chartParams + "&chxl="+labelString;
            if (buttonValIn1 != 3){
                chartParams = chartParams + "&chdlp="+legendAlignment;
                chartParams = chartParams + "&chdl="+ getLegendString(icolStr);
                chartParams = chartParams + "&chdls=000000";                
            }
            chartParams = chartParams + "&chxr=1,"+lowValDouble+","+highValDouble + "|0," + calcedStartYear + "," + calcedEndYear + ",1";
            var values = "&chd=e:";
            values = values + encoded;
            var imageURL = chartBaseUrl + chartParams + values;        
        
                
        document.getElementById('ExploreDataPage:imageURL').value = imageURL;
        document.getElementById('ExploreDataPage:updateImageURL').click();
        
        var dtcolStr = new String (document.getElementById('ExploreDataPage:dtColumnString').textContent);
        parseData(data3, intDisType, intStartYear, intEndYear, useIndex, dtcolStr);

        if (intDisType == 1){
                var chart = new google.visualization.AnnotatedTimeLine(document.getElementById('chart_div'));
                chart.draw(data, {allowRedraw: true, wmode: 'transparent', displayZoomButtons: false, displayAnnotations: false});
                jQuery('#chart_div').css({'overflow-y' : 'visible'});
                jQuery('.dvnGraphExtractImageButton').css({'display' : 'none'});
        }
        if (intDisType == 3){
            jQuery('#chart_div').css({'overflow-y' : 'auto'});
            jQuery('.dvnGraphExtractImageButton').css({'display' : 'none'});
            var table = new google.visualization.Table(document.getElementById('chart_div'));            

            table.draw(data3, {showRowNumber: false});
        }
        if (intDisType == 2){
            var googleImageURL = chartBaseUrl + chartParams + values;
            var graphTitleParam = escape(displayTitle);
            var yAxisLabelParam = escape(yAxisStringParam);
            var sourcesParam = escape(sourceStringParam);

            var compositeImageURL = "/dvn/DataVisImage/?graphTitle=" + graphTitleParam + "&yAxisLabel=" + yAxisLabelParam + "&heightCode=" + heightValIn 
                + "&sources=" + sourcesParam + "&googleImageUrl=" + escape(googleImageURL) ;
            document.getElementById('chart_div').innerHTML = "<img src=" + compositeImageURL + ">";

             jQuery('.dvnGraphExtractImageButton').css({'display' : 'block'});
             
        }



    }

   function getRadioValue( id ) {
         elements=document.getElementsByTagName("input");
         for(i=0; i < elements.length; i++) {
              if (elements[i].id.indexOf(id) != -1 ) {
                  if (elements[i].checked) {                          
                      return elements[i].value;
                  }
              }
         }
    }


function deleteLine(){
   
    setTimeout(function(){drawVisualization();}, 1500);

}

function updateStartYear(){
     document.getElementById('ExploreDataPage:updateStartYear').click();
     
}

function updateIncludeFlags(){
     document.getElementById('ExploreDataPage:updateIncludeFlags').click();
}

function resetIndices(){

     document.getElementById('ExploreDataPage:updateUseIndex').click();
     
}

function resetLegend(){
     
      document.getElementById('ExploreDataPage:updateLegendPosition').click();
}

function resetHeight(){
     
      document.getElementById('ExploreDataPage:updateGraphHeight').click();
}

function updateEndYear(){
     document.getElementById('ExploreDataPage:updateEndYear').click();
     
}

function updateIndexYear(){
     document.getElementById('ExploreDataPage:updateIndexYear').click();
     setTimeout(function(){drawVisualization();}, 500);
}

function updateDisplayType(){

     document.getElementById('ExploreDataPage:selectDisplayButton').click();  
     
}

function startDownload() {

    var imageFlag = document.getElementById('ExploreDataPage:tabSet1:0:downloadImageGraph').checked;    
    var pdfFlag = document.getElementById('ExploreDataPage:tabSet1:0:downloadPDFGraph').checked;
    var csvFlag = document.getElementById('ExploreDataPage:tabSet1:0:downloadDataCSV').checked;
    var excelFlag = document.getElementById('ExploreDataPage:tabSet1:0:downloadDataExcel').checked;

    if (!imageFlag && !pdfFlag  && !csvFlag  && !excelFlag ) {
        alert("Please select one or more items to export.");
        return null;
    }

    if (imageFlag && !pdfFlag  && !csvFlag  && !excelFlag ) {
        document.getElementById('ExploreDataPage:tabSet1:0:downloadImage').click();
    } else if (!imageFlag && pdfFlag  && !csvFlag  && !excelFlag ) {
        document.getElementById('ExploreDataPage:tabSet1:0:downloadPDF').click();
    } else if (!imageFlag && !pdfFlag  && csvFlag  && !excelFlag ) {
        document.getElementById('ExploreDataPage:tabSet1:0:downloadCSV').click();
    } else if (!imageFlag && !pdfFlag  && !csvFlag  && excelFlag ) {
        document.getElementById('ExploreDataPage:tabSet1:0:downloadExcel').click();
    } else {
        document.getElementById('ExploreDataPage:tabSet1:0:downloadZip').click();
    }
   
}

function getImageURLButton()
{

    var imageURL = document.getElementById('ExploreDataPage:imageURL').value;
    var hasURLVal = document.getElementById('ExploreDataPage:hasURL').value;
    if (hasURLVal != "true"){
        
        alert ("Please select image graph to get a downloadable image.");
        return null;
    }
    window.open(imageURL,'mywindow','width=600,height=400');
}


function setLegendValue(obj) {
    selections = document.getElementById(obj.id).getElementsByTagName("INPUT");
    for (var i = 0; selections[i]; i++) {
        if (selections[i].checked == true && selections[i].value != originalSelection) {
            originalSelection = selections[i];
            document.getElementById('form1:tabSet1:0:hiddenDataDownload').value=selections[i].value;
            break;
        } 
    }
    for (var i = 0; selections[i]; i++) {
        if (selections[i].value != originalSelection) {
            selections[i].checked = false;
        }
    }
}

var simpleEncoding = 
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

// This function scales the submitted values so that
// maxVal becomes the highest value.
function simpleEncode(valueArray,maxValue) {
  var chartData = ['s:'];
  for (var i = 0; i < valueArray.length; i++) {
    var currentValue = valueArray[i];
    if (!isNaN(currentValue) && currentValue >= 0) {
    chartData.push(simpleEncoding.charAt(Math.round((simpleEncoding.length-1) * 
      currentValue / maxValue)));
    }
      else {
      chartData.push('_');
      }
  }
  return chartData.join('');
}

// Same as simple encoding, but for extended encoding.
var EXTENDED_MAP=
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-.';
var EXTENDED_MAP_LENGTH = EXTENDED_MAP.length;
function extendedEncode(arrVals, maxVal, minVal) {
    var ymin=0;
var ymax=4095;
  var chartData = '';

  for(i = 0, len = arrVals.length; i < len; i++) {
    // In case the array vals were translated to strings.
    var numericVal = new Number(arrVals[i]);
    // Scale the value to maxVal.
    var scaledVal = Math.floor(EXTENDED_MAP_LENGTH * 
        EXTENDED_MAP_LENGTH * numericVal / maxVal);

    var scaledVal=Math.round((((ymin-ymax)/(maxVal-minVal))*(maxVal-numericVal))+ymax);    
    if(scaledVal > (EXTENDED_MAP_LENGTH * EXTENDED_MAP_LENGTH) - 1) {
      chartData += "..";
    } else if (scaledVal < 0) {
      chartData += '__';
    } else {
      // Calculate first and second digits and add them to the output.
      var quotient = Math.floor(scaledVal / EXTENDED_MAP_LENGTH);
      var remainder = scaledVal - EXTENDED_MAP_LENGTH * quotient;
      chartData += EXTENDED_MAP.charAt(quotient) + EXTENDED_MAP.charAt(remainder);
    }
  }
  return chartData;
}

// ]]>
    </script>

</ice:form>

</ui:define>
</ui:composition>
</body>
</html>
