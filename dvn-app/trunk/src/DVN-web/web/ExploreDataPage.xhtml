<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:jsp="http://java.sun.com/JSP/Page"
      xmlns:dvn="/WEB-INF/tlds/dvn-components"
      xmlns:ice="http://www.icesoft.com/icefaces/component">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
</head>
<body>
<ui:composition template="/template.xhtml">
<ui:param name="pageTitle" value="Explore Data - #{VDCRequest.dataversePageTitle}"/>
<ui:define name="body">
<ice:form id="ExploreDataPage">
    <ice:message for="exploredataform" id="boxErrorMsg" styleClass="errorMessage"/>

   <script type='text/javascript' src='https://www.google.com/jsapi'></script>
   <script type='text/javascript' src="http://api.timepedia.org/gviz/"></script>
<script type="text/javascript">
    
    google.load('visualization', '1', {'packages':['annotatedtimeline']});
    google.load('visualization', '1', {packages:['table']});

 function drawChart(data, intDisType) {
          
        var myString = new String (document.getElementById('ExploreDataPage:columnString').textContent);
        var myColumnList = myString.split ( ',' );
        var myDataString = new String (document.getElementById('ExploreDataPage:dataString').textContent);
        var myRowList = myDataString.split ( ';' );
        var numColumnsStr =  new String (document.getElementById('ExploreDataPage:dataColumns').textContent);
        var numColumns = parseInt(numColumnsStr);
        
        
// <![CDATA[
    for (i=0; i< myColumnList.length ;i++)
    { 
        var myColumn = myColumnList[i];
        if (i==0 && intDisType != 3 ){
            data.addColumn('date', myColumn);
        } else {
            data.addColumn('number', myColumn);
        }
    }
       
    for (i=0; i< myRowList.length -1 ;i++)
    {
        var myRow = myRowList[i];
        if (numColumns == 1){
            addRows1(data, myRow, intDisType);
        }
        if (numColumns == 2){
            addRows2(data, myRow, intDisType);
        }
        if (numColumns == 3){
            addRows3(data, myRow, intDisType);
        }
        if (numColumns == 4){
            addRows4(data, myRow, intDisType);
        }
        if (numColumns == 5){
            addRows5(data, myRow, intDisType);
        }
        if (numColumns == 6){
            addRows6(data, myRow, intDisType);
        }
        if (numColumns == 7){
            addRows7(data, myRow, intDisType);
        }
        if (numColumns == 8){
            addRows8(data, myRow, intDisType);
        }



     }

    // ]]>


      }

      function addRows1(dataTable, rowList, intDisType) {
          var myRowParse = rowList.split ( ',' );
          var yearNum = parseInt(myRowParse[0]);
          var dollNum = parseFloat(myRowParse[1]);
          if (intDisType != 3){
            dataTable.addRow([new Date(yearNum, 0 ,1), dollNum]);
          }  else {
             dataTable.addRow([yearNum, dollNum]);
          }
      }

      function addRows2(dataTable, rowList, intDisType) {
          var myRowParse = rowList.split ( ',' );
          var yearNum = parseInt(myRowParse[0]);
          var dollNum = parseFloat(myRowParse[1]);
          var dollNum2 = parseFloat(myRowParse[2]);
          if (intDisType != 3){
            dataTable.addRow([new Date(yearNum, 0 ,1), dollNum, dollNum2]);
          } else {
            dataTable.addRow([yearNum, dollNum, dollNum2]);
          }
      }

      function addRows3(dataTable, rowList, intDisType) {
          var myRowParse = rowList.split ( ',' );
          var yearNum = parseInt(myRowParse[0]);
          var dollNum = parseFloat(myRowParse[1]);
          var dollNum2 = parseFloat(myRowParse[2]);
          var dollNum3 = parseFloat(myRowParse[3]);
          if (intDisType != 3){
            dataTable.addRow([new Date(yearNum, 0 ,1), dollNum, dollNum2, dollNum3]);
          } else {
            dataTable.addRow([yearNum, dollNum, dollNum2, dollNum3]);
          }
        
      }

      function addRows4(dataTable, rowList, intDisType) {
          var myRowParse = rowList.split ( ',' );
          var yearNum = parseInt(myRowParse[0]);
          var dollNum = parseFloat(myRowParse[1]);
          var dollNum2 = parseFloat(myRowParse[2]);
          var dollNum3 = parseFloat(myRowParse[3]);
          var dollNum4 = parseFloat(myRowParse[4]);
          if (intDisType != 3){
            dataTable.addRow([new Date(yearNum, 0 ,1), dollNum, dollNum2, dollNum3, dollNum4]);
          } else {
            dataTable.addRow([yearNum, dollNum, dollNum2, dollNum3, dollNum4]);
          }
        
      }

      function addRows5(dataTable, rowList, intDisType) {
          var myRowParse = rowList.split ( ',' );
          var yearNum = parseInt(myRowParse[0]);
          var dollNum = parseFloat(myRowParse[1]);
          var dollNum2 = parseFloat(myRowParse[2]);
          var dollNum3 = parseFloat(myRowParse[3]);
          var dollNum4 = parseFloat(myRowParse[4]);
          var dollNum5 = parseFloat(myRowParse[5]);
          if (intDisType != 3){
            dataTable.addRow([new Date(yearNum, 0 ,1), dollNum, dollNum2, dollNum3, dollNum4, dollNum5]);
          } else {
            dataTable.addRow([yearNum, dollNum, dollNum2, dollNum3, dollNum4, dollNum5]);
          }
      }

      function addRows6(dataTable, rowList, intDisType) {
          var myRowParse = rowList.split ( ',' );
          var yearNum = parseInt(myRowParse[0]);
          var dollNum = parseFloat(myRowParse[1]);
          var dollNum2 = parseFloat(myRowParse[2]);
          var dollNum3 = parseFloat(myRowParse[3]);
          var dollNum4 = parseFloat(myRowParse[4]);
          var dollNum5 = parseFloat(myRowParse[5]);
          var dollNum6 = parseFloat(myRowParse[6]);
          if (intDisType != 3){
            dataTable.addRow([new Date(yearNum, 0 ,1), dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6]);
          } else {
            dataTable.addRow([yearNum, dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6]);
          }
      }

      function addRows7(dataTable, rowList, intDisType) {
          var myRowParse = rowList.split ( ',' );
          var yearNum = parseInt(myRowParse[0]);
          var dollNum = parseFloat(myRowParse[1]);
          var dollNum2 = parseFloat(myRowParse[2]);
          var dollNum3 = parseFloat(myRowParse[3]);
          var dollNum4 = parseFloat(myRowParse[4]);
          var dollNum5 = parseFloat(myRowParse[5]);
          var dollNum6 = parseFloat(myRowParse[6]);
          var dollNum7 = parseFloat(myRowParse[7]);
          if (intDisType != 3){
            dataTable.addRow([new Date(yearNum, 0 ,1), dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6, dollNum7]);
          } else {
            dataTable.addRow([yearNum, dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6, dollNum7]);
          }
      }

      function addRows8(dataTable, rowList, intDisType) {
          var myRowParse = rowList.split ( ',' );
          var yearNum = parseInt(myRowParse[0]);
          var dollNum = parseFloat(myRowParse[1]);
          var dollNum2 = parseFloat(myRowParse[2]);
          var dollNum3 = parseFloat(myRowParse[3]);
          var dollNum4 = parseFloat(myRowParse[4]);
          var dollNum5 = parseFloat(myRowParse[5]);
          var dollNum6 = parseFloat(myRowParse[6]);
          var dollNum7 = parseFloat(myRowParse[7]);
          var dollNum8 = parseFloat(myRowParse[8]);
          if (intDisType != 3){
            dataTable.addRow([new Date(yearNum, 0 ,1), dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6, dollNum7, dollNum8]);
          } else {
            dataTable.addRow([yearNum, dollNum, dollNum2, dollNum3, dollNum4, dollNum5, dollNum6, dollNum7, dollNum8]);
          }
      }


function drawVisualization() {

            var displayType = new String (document.getElementById('ExploreDataPage:displayType').textContent);
      var intDisType = parseInt(displayType);

      var data = new google.visualization.DataTable();
        drawChart(data, intDisType);
        if (intDisType == 1){
                var chart = new google.visualization.AnnotatedTimeLine(document.getElementById('chart_div'));
                chart.draw(data, {displayAnnotations: true});
        }
        if (intDisType == 3){
            var table = new google.visualization.Table(document.getElementById('chart_div'));
            table.draw(data, {showRowNumber: false});
        }
        if (intDisType == 2){
            chronoscope.Chronoscope.setFontBookRendering(true);
            chronoscopeDivID ="chart_div";
            var chrono = new chronoscope.ChronoscopeVisualization(document.getElementById(chronoscopeDivID));
            chrono.draw(data, { legend: "true", overview: "true"});
        }

}


    </script>
<ice:inputHidden id="vdcId" value="#{VDCRequest.currentVDCId}"/>

<ice:outputText visible="false" id="columnString" value="#{ExploreDataPage.columnString}"/>
<ice:outputText visible="false" id="dataString" value="#{ExploreDataPage.dataString}"/>
<ice:outputText visible="false" id="dataColumns" value="#{ExploreDataPage.dataColumns}"/>
<ice:outputText visible="false" id="displayType" value="#{ExploreDataPage.displayType}"/>

<style type="text/css">
    .fileInfo {margin-bottom:1em;}
    .graphForm {margin:1em; padding-bottom:1em; border-bottom:1px solid grey; text-align: left;}
    .graphResults {margin:1em; overflow:hidden; text-align: left;}
    .graphResultsVizLineTable, .graphResultsVizLineTable td {border:0; padding:0;}
</style>
            

    <div class="dvn_section">
        <div class="dvnstudytitleblock">
            <div class="dvnstudyadminboxfloat dvn_right">
                <ice:outputLink value="/dvn#{VDCRequest.currentVDCURL}/faces/study/StudyPage.xhtml?studyId=#{ExploreDataPage.studyId}&amp;tab=files">
                    <ice:outputText value="Back to Study"/>
                </ice:outputLink>
            </div>
        </div>

        <div class="graphForm">

            <div style="overflow:hidden; margin-bottom:.5em;">
                <ice:message for="indicator" id="boxErrorMsg" styleClass="errorMessage"/>
                <div style="float:left;">
                    <ice:message for="indicator" id="boxErrorMsg" styleClass="errorMessage"/>
                    <ice:outputLabel value="#{ExploreDataPage.measureLabel}" for="indicator"/>

                    <ice:selectOneMenu id="indicatorMenu" value="#{ExploreDataPage.selectedMeasureId}"
                                       onchange="submit()"
                                       valueChangeListener="#{ExploreDataPage.resetFiltersForMeasure}">
                        <f:selectItems value="#{ExploreDataPage.selectMeasureItems}"/>
                    </ice:selectOneMenu>
                </div>
                <div style="float:left;">
                    <ice:outputLabel value="Type:" for="issue"/>
                    <ice:selectOneMenu immediate="false" onchange="submit()" id="issue"
                                        valueChangeListener="#{ExploreDataPage.reset_MeasureItems}" value="#{ExploreDataPage.groupTypeId}">
                        <f:selectItems  value="#{ExploreDataPage.selectMeasureGroupTypes}"/>
                    </ice:selectOneMenu>
                </div>
            </div>

            <div style="overflow:hidden; margin-bottom:.5em;">
                <div jsfc="ice:panelSeries" id ="filterPanelGroupings" var="item" value="#{ExploreDataPage.filterGroupings}" binding="#{ExploreDataPage.filterPanelGroup}">
                    <f:attribute name="groupingId" value="#{item.varGrouping.id}"/>
                    <ice:outputLabel value="#{item.varGrouping.name}"/>

                    <ice:selectOneMenu id ="filterGroup" styleClass="filterGroup" value="#{item.selectedGroupId}">
                        <f:selectItems value="#{ExploreDataPage.selectFilterGroups}"/>
                    </ice:selectOneMenu>
                    <ice:message for="filterPanelGroupTypes" id="boxErrorMsg" styleClass="errorMessage"/>
                    <div jsfc="ice:panelSeries" style="overflow:hidden;" id="filterPanelGroupTypes" var="groupType" value="#{item.varGroupTypesUI}">
                        <!-- controls -->
                        <div jsfc="ice:panelGroup" style="float:left;">
                            <ice:selectBooleanCheckbox id="filterGroupTypeCheckBoxes" styleClass="filterGroupTypeCheckBoxes" value="#{groupType.enabled}"
                                                        partialSubmit="true"/>
                            <ice:outputLabel value="#{groupType.varGroupType.name}"/>
                        </div>
                    </div>
                </div>
            </div>

            <div style="overflow:hidden; margin-bottom:.5em;">
                <div style="float:left;">
                    <ice:outputLabel value="Label" for="graphlinelabel"/>
                    <ice:inputText id="graphlinelabel" value="#{ExploreDataPage.lineLabel}"></ice:inputText>
                </div>
                <div>
                    <ice:commandButton id="addLineButton" type="submit" value="Add Line" binding="#{ExploreDataPage.addLineButton}" action="#{ExploreDataPage.addLine}"/>
                    <ice:message for="addLineButton" id="boxErrorMsg" styleClass="errorMessage"/>
                </div>
            </div>
        </div>

        <div class="graphResults">
            <div class="linebox" style="float:left; margin-right:1em;">
                <ice:dataTable width="100%" cellspacing="0" cellpadding="0" var="line" styleClass="graphResultsVizLineTable" value="#{ExploreDataPage.vizLines}" binding="#{ExploreDataPage.dataTableVizLines}">
                  <h:column>
                     <div style="padding:4px; margin:0 0 1em 0; #{line.border}">
                        <div style="font-weight:bold;">
                            <ice:outputText value="#{line.label}"/>
                        </div>
                        <div style="font-weight:bold; color:#484848;">
                            <ice:outputText value="#{line.measureLabel}"/>
                        </div>
                        <div jsfc="ice:panelGroup">
                            <ice:outputText value="#{line.measureGroup.name}"/>
                        </div>
                        <div jsfc="ice:panelSeries" id="lineListPanelSeries" var="filterGroup" value="#{line.filterGroups}">
                            <div style="font-weight:bold; color:#484848;">
                                <ice:outputText value="#{filterGroup.groupAssociation.name}"/>
                            </div>
                            <div>
                                <ice:outputText value="#{filterGroup.name}"/>
                            </div>
                        </div>
                        <div>
                            <ice:commandButton id="deleteLineButton" type="submit" value="Delete Line" binding="#{ExploreDataPage.deleteLineButton}" actionListener="#{ExploreDataPage.deleteLine}"/>
                            <ice:message for="deleteLineButton" id ="boxErrorMsg"  styleClass="errorMessage"/>
                        </div>
                    </div>
                  </h:column>
                </ice:dataTable>
            </div>

            <div  class="graphbox" style="float:left; margin-right:1em;">
                <div id='chart_div' style='width: 540px; height: 400px;'></div>
            </div>

            <div class="graphdisplay" style="float:left;">
                <div style="margin-bottom:.5em;">
                    <ice:outputLabel value="Display" for="graphdisplay" style="display:block;"/>
                    <ice:selectOneMenu id="graphdisplay"  binding="#{ExploreDataPage.selectGraphType}"
                                       onchange="getElementById('ExploreDataPage:selectDisplayButton').click();">
                        <f:selectItem itemLabel="Select Display" itemValue="0"/>
                        <f:selectItem itemLabel="Graph" itemValue="1"/>
                        <f:selectItem itemLabel="Table" itemValue="3"/>

                    </ice:selectOneMenu>
                    <ice:commandButton  value="Create"  onclick="drawVisualization();"/>
                     <ice:commandButton visible="false" id="selectDisplayButton"  action="#{ExploreDataPage.reset_DisplayType}"/>
                </div>
                <div style="margin-bottom:.5em;">
                    <ice:outputLabel value="Title" for="graphtitle" style="display:block;"/>
                    <ice:inputText id="graphtitle" size="40"></ice:inputText>
                </div>
                
                <div style="overflow:hidden; margin-bottom:.5em;">
                    
                    <div style="float:left;">
                        <ice:outputLabel value="Start" for="graphstart" rendered ="false"/>
                        <ice:selectOneMenu id="graphstart" rendered ="false">
                            <f:selectItem itemLabel="1918" itemValue=""/>
                        </ice:selectOneMenu>
                    </div>
                    <div style="float:left;">
                        <ice:outputLabel value="End" for="graphend" rendered ="false"/>
                        <ice:selectOneMenu id="graphend" rendered ="false">
                            <f:selectItem itemLabel="2004" itemValue=""/>
                        </ice:selectOneMenu>
                    </div>
                </div>
                <div style="margin-bottom:.5em;">
                    <ice:selectBooleanCheckbox id="displayindices" value="" rendered ="false"/>
                    <ice:outputLabel value="Display Series as Indices" for="displayindices" style="font-weight:normal;" rendered="false"/>
                    <ice:selectOneRadio id="referenceperiod"
                                        layout="pageDirection"
                                        immediate="true"
                                        value=""
                                        rendered ="false">
                      <f:selectItem value="" itemLabel="Use First Period as Reference Period"/>
                      <f:selectItem value="" itemLabel="Select Reference Period"/>
                    </ice:selectOneRadio>
                    <ice:selectOneMenu id="selectreferenceperiod" rendered ="false">
                        <f:selectItem itemLabel="Select a Period..." itemValue=""/>
                    </ice:selectOneMenu>
                </div>
                <div style="margin-bottom:.5em;">
                    <ice:outputLabel value="Export" for="graphexport" style="display:block;"/>
                    <ice:selectOneMenu id="graphexport">
                        <f:selectItem itemLabel="Select File Format..." itemValue=""/>
                    </ice:selectOneMenu>
                    <ice:commandButton type="submit" value="Download"/>
                    
                </div>

            </div>

        </div>

    </div>
        <script type="text/javascript">
            //<![CDATA[
            // this is done to ensure that the scholar fields are properly inited. wjb
            showAll();
            // ]]>
        </script>
</ice:form>

</ui:define>
</ui:composition>
</body>
</html>
