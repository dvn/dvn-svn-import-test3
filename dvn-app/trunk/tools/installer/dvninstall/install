#!/usr/bin/perl

use Getopt::Long;
use Socket; 

my( %opts ) = ( );
my( $rez ) = GetOptions( \%opts, "pg_only!");


my @CONFIG_VARIABLES = (); 

unless ($opts{pg_only})
{
    @CONFIG_VARIABLES = (       
	    'HOST_DNS_ADDRESS',
	    'GLASSFISH_DIRECTORY',

	    'POSTGRES_SERVER',
	    'POSTGRES_PORT',
	    'POSTGRES_DATABASE',
	    'POSTGRES_USER',
	    'POSTGRES_PASSWORD',

	    'RSERVE_HOST',
	    'RSERVE_PORT',
	    'RSERVE_USER',
	    'RSERVE_PASSWORD'

	    ); 
}
else 
{
    @CONFIG_VARIABLES = (       
	    'POSTGRES_SERVER',
	    'POSTGRES_PORT',
	    'POSTGRES_DATABASE',
	    'POSTGRES_USER',
	    'POSTGRES_PASSWORD'
	    ); 
}

my %CONFIG_DEFAULTS = 
    (       
	    'HOST_DNS_ADDRESS', '',
	    'GLASSFISH_DIRECTORY', '/usr/local/glassfish',

	    'POSTGRES_SERVER',  'localhost',
	    'POSTGRES_PORT',    5432,
	    'POSTGRES_DATABASE','dvnDb',
	    'POSTGRES_USER',    'dvnApp',
	    'POSTGRES_PASSWORD','secret',

	    'RSERVE_HOST',      'localhost',
	    'RSERVE_PORT',      6311,
	    'RSERVE_USER',      'rserve',
	    'RSERVE_PASSWORD',  'rserve'

	    ); 


my %CONFIG_PROMPTS = 
    (       
	    'HOST_DNS_ADDRESS', 'Internet Address of your host',
	    'GLASSFISH_DIRECTORY', 'Glassfish Directory', 

	    'POSTGRES_SERVER',  'Postgres Server',
	    'POSTGRES_PORT',    'Postgres Server Port',
	    'POSTGRES_DATABASE','Name of the Postgres Database',
	    'POSTGRES_USER',    'Name of the Postgres User',
	    'POSTGRES_PASSWORD','Postgres user password',

	    'RSERVE_HOST',      'Rserve Server',
	    'RSERVE_PORT',      'Rserve Server Port',
	    'RSERVE_USER',      'Rserve User Name',
	    'RSERVE_PASSWORD',  'Rserve User Password'

	    ); 

# A few preliminary checks: 

# user -- must be root: 

if ( $< != 0 ) 
{
    print STDERR "\nERROR: You must be logged in as root to run the installer.\n\n";
    exit 1; 
}

# OS: 

my $uname_out = `uname -a`; 

# hostname: 

my $hostname_from_cmdline = `hostname`; 
chop $hostname_from_cmdline; 

$CONFIG_DEFAULTS{'HOST_DNS_ADDRESS'} = $hostname_from_cmdline;


print "\nWelcome to the DVN installer.\n";
unless ($opts{pg_only}) 
{
    print "You will be guided through the process of setting up a NEW\n";
    print "instance of the DVN application\n";
    print "(PLEASE NOTE, that this installer should NOT be used to upgrade an\n";
    print "existing DVN installation!)\n";
} 
else 
{
    print "You will be guided through the process of configuring the\n";
    print "LOCAL instance of PostgreSQL database for use by the DVN\n";
    print "application.\n";
}

my @uname_tokens = split (" ", $uname_out); 

if ( $uname_tokens[0] eq "Darwin" )
{
    print "\nThis appears to be a MacOS X system; good.\n";
    # TODO: check the OS version

    $WORKING_OS = "MacOSX"; 
}
elsif ( $uname_tokens[0] eq "Linux" )
{
    if ( -f "/etc/redhat-release" )
    {
	print "\nThis appears to be a RedHat system; good.\n";
	$WORKING_OS = "RedHat"; 
	# TODO: check the distro version
    }
    else 
    {
	print "\nThis appears to be a non-RedHat Linux system;\n";
	print "this installation *may* succeed; but we're not making any promises!\n";
	$WORKING_OS = "Linux"; 
    }
} 
else 
{
    print "\nWARNING: This appears to be neither a Linux or MacOS X system!\n";
    print "This installer script will most likely fail. Please refer to the\n";
    print "DVN Installers Guide for more information.\n\n";

    $WORKING_OS = "Unknown";

    print "Do you wish to continue?\n [y/n] ";


    my $yesnocont = <>; chop $yesnocont;

    while ( $yesnocont ne "y" && $yesnocont ne "n" )
    {
	print "Please enter 'y' or 'n'!\n";
	print "(or ctrl-C to exit the installer)\n";
	$yesnocont = <>; chop $yesnocont;
    }

    if ( $yesnocont eq "n" )
    {
	exit 0;
    }

}

 ENTERCONFIG: 

print "\n";
print "Please enter the following configuration values:\n";
print "(hit [RETURN] to accept the default value)\n";
print "\n";

for $ENTRY (@CONFIG_VARIABLES)
{
    print $CONFIG_PROMPTS{$ENTRY} . ": ";
    print "[" . $CONFIG_DEFAULTS{$ENTRY} . "] ";

    $user_entry = <>; 
    chop $user_entry; 

    if ($user_entry ne "")
    {
	$CONFIG_DEFAULTS{$ENTRY} = $user_entry;
    }

    print "\n";
}

# CONFIRM VALUES ENTERED: 


print "\nOK, please confirm what you've entered:\n\n";

for $ENTRY (@CONFIG_VARIABLES)
{
    print $CONFIG_PROMPTS{$ENTRY} . ": " . $CONFIG_DEFAULTS{$ENTRY} . "\n";
}

print "\nIs this correct? [y/n] ";


my $yesno = <>; chop $yesno;  

while ( $yesno ne "y" && $yesno ne "n" )
{
    print "Please enter 'y' or 'n'!\n";
    print "(or ctrl-C to exit the installer)\n";
    $yesno = <>; chop $yesno;  
}

if ( $yesno eq "n" )
{
    goto ENTERCONFIG; 
}


# CONFIGURE POSTGRES: 

print "\nConfiguring Postgres Database:\n";

my $pg_local_connection = 0; 

if ( $CONFIG_DEFAULTS{'POSTGRES_SERVER'} eq 'localhost' )
{
    $pg_local_connection = 1; 

    # Check for system user postgres:

    $POSTGRES_SYS_NAME = "postgres";
    $POSTGRES_SYS_UID = (getpwnam ("postgres"))[2]; 

    if ($POSTGRES_SYS_UID == undef) {
	print STDERR "\nERROR: I haven't been able to find user \"postgres\" on the system!\n";
	print STDERR "(TODO: prompt the user instead to supply an alternative username, if\n";
	print STDERR "available)\n";

	exit 1; 
    }

    # Check if psql is present: 

    $sys_path = $ENV{'PATH'}; 
    @sys_path_dirs = split ( ":", $sys_path ); 

    $psql_command = ""; 

    for $sys_path_dir ( @sys_path_dirs )
    {
	if ( -x $sys_path_dir . "/psql" ) 
	{
	    $psql_command = $sys_path_dir ."/psql"; 
	    last; 
	}
    }

    if ( $psql_command eq "" )
    {
	print STDERR "\nERROR: I haven't been able to find the psql command in your PATH!\n";
	print STDERR "Please make sure PostgresQL is properly installed and try again.\n\n";

	exit 1; 
    }

    # Check PostgresQL version: 

    open (PSQLOUT, "psql --version|"); 

    $psql_version_line = <PSQLOUT>; 
    chop $psql_version_line; 
    close PSQLOUT; 

    my ($postgresName, $postgresNameLong, $postgresVersion) = split ( " ", $psql_version_line ); 

    unless ( $postgresName eq "psql" && $postgresVersion =~ /^[0-9][0-9\.]*$/ )
    {
	print STDERR "\nERROR: Unexpected output from psql command!\n";
	print STDERR "Please make sure PostgresQL is properly installed and try again.\n\n";

	exit 1; 
    }


    my (@postgres_version_tokens) = split ( '\.', $postgresVersion ); 

    unless ( $postgres_version_tokens[0] >= 8 && $postgres_version_tokens[1] >= 3 )
    {
	print STDERR "\nERROR: PostgresQL version 8.3, or newer, is required!\n";
	print STDERR "Found a copy of psql ($psql_command) that belongs to version $postgresVersion.\n\n";
	print STDERR "Please make sure the right version of PostgresQL is properly installed,\n";
	print STDERR "and the right version of psql comes first in the PATH,\n";
	print STDERR "then try again.\n";

	exit 1; 
    }

    print "\n\nFound Postgres psql command, version $postgresVersion. Good.\n\n";

}

if ($pg_local_connection) 
{
    

    $< = $POSTGRES_SYS_UID; 
    $> = $POSTGRES_SYS_UID; 

    print "Checking if a local instance of Postgres is running and accessible...\n";

    if (!system ("psql -c 'SELECT * FROM pg_roles' > /dev/null 2>&1"))
    {
	print "Yes, it is.\n";
    }
    else
    {
	print "Nope, I haven't been able to connect to the local instance of PostgresQL.\n";
	print "daemon. Is postgresql running? You can check the status of the daemon with\n\n";
	print "   service postgresql status\n\n";
	print "and, if it's not running, start the daemon with\n\n";
	print "   service postgresql start\n\n";
	print "Also, please make sure that the daemon is listening to network connections,\n";
	print "at leaset on the localhost interface. (See \"Installing Postgres\" section\n";
	print "of the installation manual).\n";
	print "Finally, please make sure that the postgres user can make localhost \n";
	print "connections without supplying a password. (That's controlled by the \n";
	print "\"localhost ... ident\" line in pg_hba.conf; again, please consult the \n";
	print "installation manual).\n";


	exit 1; 
    }

    # 1. CREATE DVN DB USER:

    print "\nCreating Postgres user (role) for the DVN:\n";

    open TMPCMD, ">/tmp/pgcmd.$$.tmp";


    # with unencrypted password: 
    #print TMPCMD "CREATE ROLE ".$CONFIG_DEFAULTS{'POSTGRES_USER'}." UNENCRYPTED PASSWORD '".$CONFIG_DEFAULTS{'POSTGRES_PASSWORD'}."' NOSUPERUSER CREATEDB CREATEROLE NOINHERIT LOGIN";

    # with md5-encrypted password:
    $pg_password_md5 = &create_pg_hash ($CONFIG_DEFAULTS{'POSTGRES_USER'},$CONFIG_DEFAULTS{'POSTGRES_PASSWORD'}); 
    my $sql_command = "CREATE ROLE \"".$CONFIG_DEFAULTS{'POSTGRES_USER'}."\" PASSWORD 'md5". $pg_password_md5 ."' NOSUPERUSER CREATEDB CREATEROLE INHERIT LOGIN";

    print TMPCMD $sql_command; 
    close TMPCMD; 

    my $psql_commandline = "psql -f /tmp/pgcmd.$$.tmp";

    unless ( ($exitcode = system($psql_commandline)) == 0 )
    {
	print STDERR "Could not create the DVN Postgres user role!\n";
	print STDERR "(SQL: " . $sql_command . ")\n";
	print STDERR "(psql exit code: " . $exitcode . ")\n";
	exit 1; 
    }

    unlink "/tmp/pgcmd.$$.tmp";
    print "done.\n";
    
    # 2. CREATE DVN DB: 

    print "\nCreating Postgres database:\n";

    $psql_command = "createdb ".$CONFIG_DEFAULTS{'POSTGRES_DATABASE'}." --owner=".$CONFIG_DEFAULTS{'POSTGRES_USER'};

    unless ( ($exitcode = system("$psql_command")) == 0 ) 
    {
	print STDERR "Could not create Postgres database for the DVN app!\n";
	print STDERR "(command: " . $psql_command . ")\n";
	print STDERR "(psql exit code: " . $exitcode . ")\n";
	exit 1; 
	
    }

    print "done.\n";

}
else 
{
    if ( $opts{$pg_only} )
    {
	print "The script must be run in the --pg_only mode ONLY locally\n";
	print "on the server where PostgresQL is running.\n";

	exit 1; 
    }

    print "In order to use a PostgresQL database running on a remote server,\n";
    print "Please run this script on that host with the \"--pg_only\" option:\n\n";
    print "./install --pg_only\n\n";

    print "Press any key to continue the installation process once that has been\n";
    print "done. Or press ctrl-C to exit the installer.\n\n";


    system "stty cbreak </dev/tty >/dev/tty 2>&1";
    my $key = getc(STDIN);
    system "stty -cbreak </dev/tty >/dev/tty 2>&1";
    print "\n";

    # Check if the role and database have been created on the remote server:
    # -- TODO; 

}

# Changing back to root UID: 

$> = 0; 
$< = 0;      

if ( $opts{pg_only} )
{
    exit 0; 
}

print "\nProceeding with the Glassfish setup.\n";
print "\nChecking your Glassfish installation..."; 

my $glassfish_dir = $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'}; 

unless ( -d $glassfish_dir."/domains/domain1" )
{
    # TODO: need better check than this

    while ( ! ( -d $glassfish_dir."/domains/domain1" ) )
    {
	print "\nInvalid Glassfish directory " . $glassfish_dir . "!\n";
	print "Enter the root directory of your Glassfish installation:\n";
	print "(Or ctrl-C to exit the installer): "; 

	$glassfish_dir = <>; 
	chop $glassfish_dir; 
    }
}

print "OK!\n";

# Let's determine how much memory to give to Glassfish as heap: 

$gf_heap_default = "2048m"; 

if ( -e "/proc/meminfo" && open MEMINFO, "/proc/meminfo" ) 
{
    # Linux 
    $sys_mem_total = 0; 

    while ( $mline = <MEMINFO> )
    {
	if ( $mline =~ /MemTotal:[ \t]*([0-9]*) kB/ )
	{
	    $sys_mem_total = $1; 
	}
    }

    close MEMINFO; 

    if ( $sys_mem_total != 0 )
    {
	$gf_heap_default = ( int ($sys_mem_total / 2000 ) ) . "m"; 
    }
}

push @CONFIG_VARIABLES, "DEF_MEM_SIZE"; 
$CONFIG_DEFAULTS{"DEF_MEM_SIZE"} = $gf_heap_default; 

print "\nWriting glassfish configuration file (domain.xml)... ";


open TEMPLATEIN, 'domain.xml.TEMPLATE'; 
open CONFIGOUT, '>domain.xml';

while( <TEMPLATEIN> )
{
    for $ENTRY (@CONFIG_VARIABLES)
    {
	$patin = '%' . $ENTRY . '%'; 
	$patout = $CONFIG_DEFAULTS{$ENTRY}; 
	
	s/$patin/$patout/g;
    }

    print CONFIGOUT $_; 

}

close TEMPLATEIN; 
close CONFIGOUT; 

print "done.\n";

system ("/bin/cp -f domain.xml ".$glassfish_dir."/domains/domain1/config"); 
#diagnostics needed!

print "\nCopying additional configuration files... ";

system ( "/bin/cp -f config/* ".$glassfish_dir."/domains/domain1/config"); 
#diagnostics needed!

print "done!\n";

print "\nInstalling the Glassfish PostgresQL driver... ";

system ( "/bin/cp -f pgdriver/* ".$glassfish_dir."/lib"); 
#diagnostics needed!

print "done!\n";


print "\nStarting glassfish.\n";

unless ( ($exit_code=system ($glassfish_dir."/bin/asadmin start-domain domain1")) == 0 )
{
	print STDERR "Could not start glassfish!\n";
	print STDERR "(exit code: " . $exitcode . ")\n";
	exit 1; 
}


# check if glassfish is running: 
# TODO. 


# Deploy: 
print "\nAttempting to deploy the application:\n\n";

$CONFIG_DEFAULTS{'GLASSFISH_ADMIN_PASSWORD'} = 'adminadmin'; 
# TODO: ask for password! -- in case they have already changed it

my $glassfish_password = $CONFIG_DEFAULTS{'GLASSFISH_ADMIN_PASSWORD'}; 

# create deployment properties files:

for $prop_file ('AS', 'glassfish') 
{
    open ( TEMPLIN, "appdeploy/" . $prop_file . ".properties.TEMPLATE" ) 
	|| die "failed to open appdeploy/" . $prop_file . ".properties.TEMPLATE";
    open ( PROPOUT, ">appdeploy/" . $prop_file . ".properties" ) 
	|| die "failed to open appdeploy/" . $prop_file . ".properties for writing";

    while( <TEMPLIN> )
    {
	s/%GF_ADMIN_PASSWORD%/$glassfish_password/g;
	print PROPOUT $_; 
    }

    close TEMPLIN; 
    close PROPOUT; 
}

# 

my $ant_exec = $glassfish_dir . "/lib/ant/bin/ant";

unless ( -x $ant_exec ) 
{
    chmod 0755, $ant_exec; 
}

unless ( ($exit_code = system ("cd appdeploy; " . $ant_exec)) == 0 )
{
	print STDERR "Could not deploy DVN application!\n";
	print STDERR "(exit code: " . $exitcode . ")\n";
	exit 1; 
}

print "\nOK; now we are going to stop glassfish and populate the database with\n";
print "some initial content, then start glassfish again.\n";


# shut down: 

$gf_stop_command = $glassfish_dir."/bin/asadmin stop-domain domain1"; 

unless ( ($exit_code = system ($gf_stop_command)) == 0 )
{
	print STDERR "Could not stop glassfish!\n";
	print STDERR "(command line: " . $gf_stop_command . ")\n";
	print STDERR "(exit code: " . $exitcode . ")\n";
	exit 1; 
}


if ( $pg_local_connection )
{
    print "\nPopulating the database (local PostgresQL instance):\n\n";

    $< = $POSTGRES_SYS_UID; 
    $> = $POSTGRES_SYS_UID; 
    $psql_command = "psql -d $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} -f referenceData.sql";

    unless ( ($exitcode = system("$psql_command")) == 0 ) 
    {
	print STDERR "Could not populate Postgres database for the DVN app!\n";
	print STDERR "(command: " . $psql_command . ")\n";
	print STDERR "(psql exit code: " . $exitcode . ")\n";
	print STDERR "\nYou must populate the database before you can use your new\n";
	print STDERR "DVN instance. Please consult the installation manual and/or\n";
	print STDERR "seek support from the DVN team.\n\n";
	exit 1; 
	
    }

    print "\nOK, done!\n";

}
else 
{
    # NOT SUPPORTED YET -- TODO
    print "Sorry, populating remote databases not supported yet!\n";
    print "Please copy the file referenceData.sql (found in this directory)\n";
    print "onto the remote server and populate the database manually,\n";
    print "as user postgres, with the following command:\n\n";
    print "   psql -d $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} -f referenceData.sql\n";
    print "then start glassfish again on this server with \n\n";
    print "   " . $glassfish_dir."/bin/asadmin start-domain domain1\n\n";

    $> = 0; 
    $< = 0; 

    exit 0; 
    
}

# back to root:

$> = 0; 
$< = 0; 


print "\nStarting glassfish, again:\n\n";
system ($glassfish_dir."/bin/asadmin start-domain domain1");

$gf_start_command = $glassfish_dir."/bin/asadmin start-domain domain1"; 

unless ( ($exit_code = system ($gf_start_command)) == 0 )
{
	print STDERR "Could not start glassfish!\n";
	print STDERR "(command line: " . $gf_start_command . ")\n";
	print STDERR "(exit code: " . $exitcode . ")\n";
	exit 1; 
}


print "\nYou should now have a running DVN instance;\n";
print "Please go to the application at the following URL:\n\n";
print "  http://" . $CONFIG_DEFAULTS{'HOST_DNS_ADDRESS'} . "/dvn\n";
print "\nand log in by using \"networkAdmin\" as both the user name\n";
print "and password. Click the \"networkAdmin\" link on the right side\n";
print "Of the main screen, then click \"Update Account\". Change this\n";
print "default password and default e-mail address.\n";

# Finally, check if Rserve is running and accessible: 

print "\n\nFinally, checking if Rserve is running and accessible...\n";

unless ( $CONFIG_DEFAULTS{'RSERVE_PORT'}=~/^[0-9][0-9]*$/ )
{
    print $CONFIG_DEFAULTS{'RSERVE_HOST'} . " does not look like a valid port number,\n";
    print "defaulting to 6311.\n\n";

    $CONFIG_DEFAULTS{'RSERVE_PORT'} = 6311; 
}
    
my ( $rserve_iaddr, $rserve_paddr, $rserve_proto );

unless ( $rserve_iaddr = inet_aton($CONFIG_DEFAULTS{'RSERVE_HOST'}) )
{
    print STDERR "Could not look up $CONFIG_DEFAULTS{'RSERVE_HOST'},\n";
    print STDERR "the host you specified as your R server.\n";
    print STDERR "\nDVN can function without a working R server, but\n";
    print STDERR "much of the functionality concerning running statistics\n";
    print STDERR "and analysis on quantitative data will not be available.\n";
    print STDERR "Please consult the Installers guide for more info.\n";

    exit 0;
}

$rserve_paddr = sockaddr_in($CONFIG_DEFAULTS{'RSERVE_PORT'}, $rserve_iaddr);
$rserve_proto = getprotobyname('tcp');

unless ( socket(SOCK, PF_INET, SOCK_STREAM, $rserve_proto) &&
	connect(SOCK, $rserve_paddr) ) 
{
    print STDERR "Could not establish connection to $CONFIG_DEFAULTS{'RSERVE_HOST'}\n";
    print STDERR "on port $CONFIG_DEFAULTS{'RSERVE_PORT'}, the address you provided\n";
    print STDERR "for your R server.\n";
    print STDERR "DVN can function without a working R server, but\n";
    print STDERR "much of the functionality concerning running statistics\n";
    print STDERR "and analysis on quantitative data will not be available.\n";
    print STDERR "Please consult the \"Installing R\" section in the Installers guide\n";
    print STDERR "for more info.\n";

    exit 0;
    
}

close (SOCK); 
print "\nOK!\n";

exit 0; 


sub create_pg_hash {
    local $pg_username = shift @_; 
    local $pg_password = shift @_; 

    $encode_line = $pg_password . $pg_username; 

    # for Redhat: 

    ##print STDERR "executing /bin/echo -n $encode_line | md5sum\n"; 

    if ( $WORKING_OS eq "MacOSX" )
    {
	$hash = `/bin/echo -n $encode_line | md5`; 
    }
    else 
    {
	$hash = `/bin/echo -n $encode_line | md5sum`; 
    }

    chop $hash; 

    $hash =~s/  \-$//; 

    if ( (length($hash) != 32) || ($hash !~ /^[0-9a-f]*$/) ) 
    {
	print STDERR "Failed to generate a MD5-encrypted password hash for the Postgres database.\n";
	exit 1; 
    }


    return $hash;
}
