README for the StatDataIO API
last update: 2009-07-XX
Akio Sone

BACKGROUND KNOWLEGE
    Before you code-read the StatData I/O API source files,
    you need preparations as follows:
    A. Required:
        * Standards
            IEEE 754-1985 Standard (floating-point arithmetic)
            ISO 8601 - Numeric representation of dates and time
        * Java packages/classes
            JSE6
                java.lang.Double, Float, Long, Integer, Short, Byte
                java.lang.reflect.* (esp. Method)
                java.nio.* (esp. ByteBuffer)
                java.util.calendar, GregorianCalendar, date
                java.util.ServiceLoader
                javax.imageio.* and its reference inplementation
                    com.sun.imageio.plugins.* (see REFERENCES-URIs)
           Apache Commons Lang
                org.apache.commons.lang.* (esp. ArrayUtils, StringUtils)

    B. Desirable:
        Java packages/classes
           Apache Commons Math
                org.apache.commons.math.stat.StatUtils


SOURCE-FILE STRUCTURE

    The StatData I/O API is designed after the Image I/O API, epsecially,
    emulating
    the service loader mechanism available in JSE6
    (java.util.ServiceLoader class).

    A. Package Structure

        1. Public API
        ../src/DVN-EJB/src/edu/harvard/iq/dvn/ingest/
        org/thedata/statdataio          [entry point classs and others]
        org/thedata/statdataio/data     [stores decoded data]
        org/thedata/statdataio/metadata [stores decoded metadata]
        org/thedata/statdataio/spi      [service provider interface (SPI)-
                                        related classes]

        2. Dataverse-implementations
        ../src/DVN-EJB/src/edu/harvard/iq/dvn/ingest/

        File-reading classes are organized by their format type:

        statdataio/impl/plugins/dta     [STATA Dta]
        statdataio/impl/plugins/por     [SPSS Portable(POR)]
        statdataio/impl/plugins/sav     [SPSS System(SAV)]
        statdataio/impl/plugins/util    [utitly classes]

        3. Service-Provider Information
        ../src/DVN-EJB/src/java/META-INF/services/

        edu.harvard.iq.dvn.ingest.org.thedata.statdataio.spi.StatDataFileReaderS
        pi

USAGE
        Similar to JSE's image-IO API, the StatDataIO AP has a convenience,
        entry class called "StatDataIO"; Two use cases are shown below:


        ../src/DVN-EJB/src/java/edu/harvard/iq/dvn/ingest/dsb/DSBWrapper.java

        /* excerpt from the ingest method of DSBWrapper.java
            ../src/DVN-
            EJB/src/java/edu/harvard/iq/dvn/ingest/dsb/DSBWrapper.java
        */

        // -------------------------------------------------------------------//
        // get the mime-type : file == an instance of StudyFileEditBean
        String mime_type = file.getStudyFile().getFileType();

        String ddi = null;

        BufferedInputStream infile = null;

        try {

            // ingest-source file
            File tempFile = new File(file.getTempSystemFileLocation()); //

            infile = new BufferedInputStream(new FileInputStream(tempFile));

            dbgLog.fine("\nfile mimeType="+mime_type+"\n\n");

            // get available FileReaders for this MIME-type
            Iterator<StatDataFileReader> itr =
                StatDataIO.getStatDataFileReadersByMIMEType(mime_type);

            if (!itr.hasNext()){
                throw new ClassNotFoundException("No FileReader Class found" +
                    " for this mime type="+ mime_type);
            }
            // use the first reader
            StatDataFileReader sdioReader = itr.next();

            dbgLog.fine("reader class name="+sdioReader.getClass().getName());

            SDIOData sd = null;
            if (mime_type != null){
                sd = sdioReader.read(infile);
            } else {
                // fail-safe block if mime_type is null
                // check the format type again and then read the file
                dbgLog.info("mime-type was null: use the back-up method");
                sd = StatDataIO.read(infile);
            }

            SDIOMetadata smd = sd.getMetadata();

            // tab-file: source file
            String tabDelimitedDataFileLocation =
                smd.getFileInformation().get("tabDelimitedDataFileLocation")
                    .toString();


            dbgLog.fine("tabDelimitedDataFileLocation="+tabDelimitedDataFileLoca
            tion);

            dbgLog.fine("data file(tempFile): abs
            path:\n"+file.getTempSystemFileLocation());
            dbgLog.fine("mimeType :\n"+file.getStudyFile().getFileType());


            if (infile != null){
                infile.close();
            }

            // parse the response
            StudyFile f = file.getStudyFile();

            // first, check dir
            // create a sub-directory "ingested"
            File newDir = new File(tempFile.getParentFile(), "ingested");

            if (!newDir.exists()) {
                newDir.mkdirs();
            }
            dbgLog.fine("newDir: abs path:\n"+newDir.getAbsolutePath());

            // tab-file case: destination
            File newFile = new File( newDir, tempFile.getName() );

            // nio-based file-copying idiom
            FileInputStream fis = new
            FileInputStream(tabDelimitedDataFileLocation);
            FileOutputStream fos = new FileOutputStream(newFile);
            FileChannel fcin = fis.getChannel();
            FileChannel fcout = fos.getChannel();
            fcin.transferTo(0, fcin.size(), fcout);
            fcin.close();
            fcout.close();
            fis.close();
            fos.close();

            dbgLog.fine("newFile: abs path:\n"+newFile.getAbsolutePath());

            // store the tab-file location
            file.setIngestedSystemFileLocation(newFile.getAbsolutePath());

            // return xmlToParse;
            DDIWriter dw = new DDIWriter(smd);
            ddi = dw.generateDDI();

        } catch (IOException e){
            dbgLog.severe("DSBWrapper:ingest(): IOException");
            e.printStackTrace();
        } catch (ClassNotFoundException ec){
            dbgLog.severe("DSBWrapper:ingest(): ClassNotFoundException");
            ec.printStackTrace();
        } catch (Exception ex){
            ex.printStackTrace();
        } finally {

        }

        return ddi;

        // -------------------------------------------------------------------//
        // end of the code-excerpt


FILE READER CLASSES

    A. Decoding Logic

    A typical statistical data file usually consists of 3 blocks:

    (1) header
    (2) metadata
    (3) data

    The first two have their sub-units that start from their specific
    marker.  The data section is usually case(observation)-wise just like a
    typical spread sheet. The existing three plug-in file-reader classess
    (DTAFileReader, PORFileReader, and SAVFileReader) of the StatDataIO package
    detect each of these unit makers and apply an appropriate method coded for
    each unit by JSE's reflection framework.

    More specifically, there is the following uniform method naming convention
    for FileReader classes:

    (1) Read() method of each reader class contains the above reflection
        mechanism
    (2) Read() method calls a method that is coded for a specific unit and
        its name is "decode"+ unit name.

    Decoded metadata and data are stored in an instance of SDIOData class,
    metadata are stored in its metadata field and data are store in data
    field.



    B. Fine Print: Important decoding rules that are coded in source files

    1. Common to all formats:

        * When data are saved in a tab-delimited file, the default numeric
          missing value is "NA" whereas the default string missing value is "".
          Floats are written with the following two format settings:

            setGroupingUsed(false)
            setMaximumFractionDigits(16)

        * The missing value token used in the DDI (decoding result to be
          returned as an XML string) is the period ('\u002E').

        * In order to avoid losing the original definition of a date or
          time variable, its data are stored in String rather than its
          internal numeric representation scheme (usually integer or float).
          The variable formats that follows this rule is listed in each
          FileReader class or its auxiliary class.


    2. Format-specific:

        * STATA DTA
            For each storage type, its missing value to be used for the UNF
            calculation is as follows:

            Byte        Byte.MAX_VALUE
            Short       Byte.MAX_VALUE
            Integer     Byte.MAX_VALUE
            Long        Long.MAX_VALUE
            Float       Float.NaN
            Double      Double.NaN

    C. Descriptive Summary/UNF statistics

       When or after the data section of a statistica data file is decoded,
       a given set of descriptive summary/UNF statistics are calculated by
       calling classes external to the StataDataIO package.
       While these calculations are not required for their decoding,
       if they are calculated separately from the decoding, numerical errors
       would be inevitably added, and thus they are included in the decoding
       process.

FUTURE IMPLEMENTATIONS AND EXTENSIONS

    A. How to add a new FileReader class

    A file reader for a new file format other than STATA DTA, SPSS SAV, SPSS POR
    can be added to the StatDataIO package without touching the API side; just
    add it source files to a newly creadted subdirectory under the following
    directory

        ../src/DVN-EJB/src/edu/harvard/iq/dvn/ingest/
            statdataio/impl/plugins/

    also add its full class name to the following file:


        ../src/DVN-EJB/src/java/META-INF/services/

      edu.harvard.iq.dvn.ingest.org.thedata.statdataio.spi.StatDataFileReaderSpi

        # service providers by the dvn statdataio implementation
        edu.harvard.iq.dvn.ingest.statdataio.impl.plugins.dta.DTAFileReaderSpi
        edu.harvard.iq.dvn.ingest.statdataio.impl.plugins.por.PORFileReaderSpi
        edu.harvard.iq.dvn.ingest.statdataio.impl.plugins.sav.SAVFileReaderSpi

        # new addition
        edu.harvard.iq.dvn.ingest.statdataio.impl.plugins.newFormat.
        NewFormatFileReaderSpi

    A new file-reader implementation for STATA DTA, or SPSS SAV, or SPSS POR can
    be added as shown above.  One difference is that because there are plural
    reader implementations of a given format, if you want to use a particular
    implementation, you must choose it among available readers.

    B. Where to move the new-ingest block to an earlier stage of the ingest call
       [i.e., how to discard the ingest() method of DSBWrapper class]

       The contents of ingest() method of DSBWrapper can be moved to
       onMessage() method of DSBIngestMessageBean class as follows:

       // current
       parseXML( new DSBWrapper().ingest(fileBean) , (TabularDataFile)
       fileBean.getStudyFile() );


       // possible revision

       BufferedInputStream infile = null;

       try {
            // ingest-source file
            File tempFile = new File(fileBean.getTempSystemFileLocation());

            infile = new BufferedInputStream(new FileInputStream(tempFile));

            SDIOData sd = StatDataIO.read(infile);
            SDIOMetadata smd = sd.getMetadata();

            // tab-file: source file
            String tabDelimitedDataFileLocation =

                    smd.getFileInformation().get("tabDelimitedDataFileLocation")
                    .toString();

            if (infile != null){
                infile.close();
            }

            // parse the response
            StudyFile f = fileBean.getStudyFile();

            // first, check dir
            // create a sub-directory "ingested"
            File newDir = new File(tempFile.getParentFile(), "ingested");

            if (!newDir.exists()) {
                newDir.mkdirs();
            }

            // tab-file case: destination
            File newFile = new File( newDir, tempFile.getName() );

            // jse-nio-based file-copy idiom
            FileInputStream fis = new
            FileInputStream(tabDelimitedDataFileLocation);
            FileOutputStream fos = new FileOutputStream(newFile);
            FileChannel fcin = fis.getChannel();
            FileChannel fcout = fos.getChannel();
            fcin.transferTo(0, fcin.size(), fcout);
            fcin.close();
            fcout.close();
            fis.close();
            fos.close();

            // store the tab-file location to StudyFileEditBean
            fileBean.setIngestedSystemFileLocation(newFile.getAbsolutePath());

            // return xmlToParse;
            DDIWriter dw = new DDIWriter(smd);

            parseXML(dw.generateDDI(), (TabularDataFile)
            fileBean.getStudyFile());


        } catch (IOException e) {

        }
        // end ****************************************************************

    D. writer side [currently stub code only]

POSSIBLE MAINTENANCE/BREAKING POINTS IN THE FUTURE

    * the calling point can be shifted to further upstream of the call
    hierarchy.

    * the length of a field may become longer and static values must be updated.

    * Unicode(non-ASCII representation) Strings may appear in label and data
      fields for the SPSS SAV format in the future

REFERENCES

    A. URIs (all websites listed below were last accessed on 2009-07-08)

        // pluggable application frameworks: JSE ServiceLoader API and others

        Creating Extensible Applications With the Java Platform
        http://java.sun.com/developer/technicalArticles/javase/extensible/

        // JSE ImageIO API

        JavaTM Image I/O Technology
        http://java.sun.com/javase/6/docs/technotes/guides/imageio/index.html

        JavaTM Image I/O API Guide
        http://java.sun.com/javase/6/docs/technotes/guides/imageio/spec/
        title.fm.html

        // ImageIO tutorial
        PCX Meets Image I/O: Creating an Image-Reading Java Plug-in
        http://www.informit.com/articles/article.aspx?p=684049
        [esp. page 3 for organizing source files]

        // JDK's ImageIO reference implementation
        download the latest OpenJDK 6 source archive from the follwing site

        http://download.java.net/openjdk/jdk6/

        Sun's ImageIO reference-implementation source files are found in the
        following directory and subdirectories in the archived file:

        ../src/share/classes/com/sun/imageio/plugins/

        // STATA
        Stata help for dta
        http://www.stata.com/help.cgi?dta

        // SPSS
        Wotsit.org (the programmer's file and data format resource)
        http://www.wotsit.org/
        [SPSS-SAV format spec document is available from this site]

        PSPP (PSPP is a program for statistical analysis of sampled data. It is
        a free replacement for the proprietary program SPSS
        [format information available from the site may be out-of-dated])
        http://savannah.gnu.org/projects/pspp
        http://git.savannah.gnu.org/cgit/pspp.git/tree/doc/dev/portable-file-
        format.texi [POR format information]

        http://git.savannah.gnu.org/cgit/pspp.git/tree/doc/dev/system-file-
        format.texi [SAV format information]

        // SAS: XPORT format
        TS-140 THE RECORD LAYOUT OF A DATA SET IN SAS TRANSPORT (XPORT) FORMAT
        http://support.sas.com/techsup/technote/ts140.html
        http://support.sas.com/techsup/technote/ts140.pdf


        // ISO date and time-related standard
        Numeric representation of Dates and Time
        http://www.iso.org/iso/support/faqs/faqs_widely_used_standards/
        widely_used_standards_other/date_and_time_format.htm


    B. Documents included in this directory

        (1) StatDataIO Package

        StatDataIO_package_diagram.pdf  UML package Diagram of StatDataIO
        package

        StatDataIO_class_diagram.pdf    UML class diagram of StatDataIO package

        DSBWrapper_ingest_sequence_diagram.pdf  UML sequence diagram that shows
                                        how StatDataIO classes works in the
                                        ingest
                                        stage
        (2) Statistical Data Formats

        SPSS_POR_format_layout.pdf .... Diagram of the SPSS POR format structure

        SPSS_POR_format_for_perl.pdf .. Memo for Perl programmers about SPSS
                                        POR-format structure and how to read it
                                        by Perl

        SPSS_SAV_format_layout.pdf .... Diagram of the SPSS SAV format structure

        SPSSS_format_definition.pdf ... SPSS document (?) about the SAV format
                                        (published in 1990s?)

        STATA_DTA_format_spec.pdf  .... Manual page (STATA DTA format
                                        specification)

                                        by STATA
        SPSS_SAV_data_compression.pdf ... Diagram of How data in a SAV file are
                                          compressed by SPSS

        catStat_HowToMerge.pdf ........ Diagram of how to merge meta-data
                                        (value label) stored in a statistical
                                        data file
                                        with calculated summary statistics
        catStat_Merge_logic.pdf ....... flow-chart of how to merge meta-data
                                        (value label) stored in a statistical
                                        data file

        ISO_8601.pdf .................. ISO 8601 Numeric representation of dates
                                        and time (summary)


        spss_date_conversion_help.pdf   An Excerpt from the SPSS manual page
                                        concerning its date-type data

    C. Sample data files
        
        (1) Stata data file that contains various date-time-format variables
            its accompanying pdf and txt file contains format data, etc.
            
            date_time_data_10_new.dta
            date_time_data_10_new_dataview.pdf
            date_time_data_10_new_dta_contents.txt

        (2) SPSS SAV/POR data file that contains various date-time-format variables
            its accompanying pdf and txt file contains format data, etc.
            The POR file was generated from the SAV file (same contents)
            
            various_dates_sav_v_17.sav
            various_dates_dataview.pdf
            various_dates_sav_v_17_contents.txt

            various_dates_por.por
            various_dates_por_contents.txt

