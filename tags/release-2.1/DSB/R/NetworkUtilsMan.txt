This file contains a list of functions and example uses for the NetworkUtils
backend.

Assume that "g" is an igraph graph object.

Ingest
======

Convert a graphml file to an RData file:
----------------------------------------
Usage:
    ingest_graphml(filename)

Arguments:
    filename: The name of the graphml file to ingest.

Returns:
    The name of the RData file that the function generates.

Side Effects:
    The function parses the graphml file and creates an igraph object which it
    dumps to a file with the same name but with a ".RData" extension instead.

Load a dumped RData file and reset the workspace:
-------------------------------------------------
Usage:
    load_and_clear(filename)

Arguments:
    filename: Name of the RData file to load.

Returns:
    Nothing.

Side Effects:
    Clears all global variables in the workspace and loads a graph
    "g" from the named RData file.

Dump an igraph object to a graphml file:
----------------------------------------
Usage:
    dump_graphml(g, filename)

Arguments:
    g: The graph object.
    filename: Name of the graphml file to create.

Returns:
    The filename provided.

Side Effects:
    Dumps a graphml representation of the graph g to a file of the name
    provided.

Basic
=====

Vertex Count:
-------------
Usage:
    vcount(g)

Arguments:
    g: The graph object.

Returns:
    The number of vertices in the graph as an integer.

Edge Count:
-----------
Usage:
    ecount(g)

Arguments:
    g: The graph object.

Returns:
    The number of edges in the graph as an integer.

Subsetting
==========

Subset by Vertices:
-------------------
Usage:
    vertex_subset(g, subset_str)

Arguments:
    g: The graph object.
    subset_str: A boolean expression as a string. May contain names of vertex
        attributes as variables.

Returns:
    A 2-element integer vector. The first element is the number of vertices
    left in the graph; the second is the number of edges.

Side Effects:
    "g" in the global environment is overwritten with an igraph object
    containing only vertices whose attributes satisfy the expression in
    subset_str. Only edges that are incident to the remaining vertices are
    retained.

Subset by Edges:
----------------
Usage:
    edge_subset(g, subset_str, drop_disconnected)

Arguments:
    g: The graph object.
    subset_str: A boolean expression as a string. May contain names of edge
        attributes as variables.
    drop_disconnected: A bool controlling whether or not to drop vertices that
        are disconnected (not incident to any edge) after edges are subsetted.
        Set to FALSE by default, thus returning a graph with the same number
        of vertices as the original.

Returns:
    A 2-element integer vector. The first element is the number of vertices
    left in the graph; the second is the number of edges.

Side Effects:
    "g" in the global environment is overwritten with an igraph object
    containing only edges whose attributes satisfy the expression in subset_str.
    Depending on the value of drop_disconnected, the returned object may no
    longer contain disconnected vertices.

Intelligent Subsetting
======================

Component Extraction:
---------------------
Usage:
    component(g, num)

Arguments:
    g: The graph object.
    num: The number of the component to be extracted, where 1 is the biggest,
        2 is the second biggest, etc, where size is measured by number of
        vertices in the component. Ties are broken arbitrarily.

Returns:
    A 2-element integer vector. The first element is the number of vertices
    left in the graph; the second is the number of edges.

Side Effects:
    "g" in the global environment is overwritten with an igraph object which
    contains the largest component of the input graph.

Adding Measures
===============

Degree:
-------
Usage:
    add_degree(g)

Arguments:
    g: The graph object.

Returns:
    The name of the new attribute column added to "g" in the global
    environment. 

Side Effects:
    Adds a column "degree_x" to g where x is the number of times add_degree has
    been called on g.

PageRank:
---------
Usage:
    add_pagerank(g, damping)

Arguments:
    g: The graph object.
    damping: The damping parameter in PageRank. It determines the baseline
        importance of an individual independent of their connectedness in the
        graph. 

Returns:
    The name of the new attribute column added to "g" in the global
    environment. 

Side Effects:
    Adds a column "pagerank_x" to g where x is the number of times
    add_pagerank has been called on g.
